{
  "hash": "20fdfa0cf1dc45fbdb275334bcc5f624",
  "result": {
    "markdown": "---\ntitle: \"Exercices\"\nauthor: \"Jasmine Dupau\"\ndate: \"2024-03-08\"\n---\n\n\n# Objectifs du travail\n\nLa réalisation des exercices a permis de pratiquer toutes les notions vues en cours de R avancé passant de la manipulation de données à la création d'un package (article dédié sur le blog).\n\nChaque exercice va être présenter de la manière suivante :\\\n-- Questions précises\\\n-- Réponses avec le code et des commentaires pour faciliter la compréhension\n\nTous les exercices ont été effectués à partir de bases de données centrées sur les jeux olympiques téléchargeables sur internet.\n\n# Exercice - semaine 1\n\nNous faisons appel aux différents packages nécessaires\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(geosphere)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(stringr)\n```\n:::\n\n\n## Question 2\n\nLisez le fichier téléchargé avec la fonction *read.table*. Le résultat sera affecté à l’objet ayant pour nom data_ex. Le jeux de données contient 4 colonnes.\\\nQuels sont les noms et la nature des colonnes ?\\\nCombien de lignes contient la data.frame ?\n\n### Etape 1 : Importation\n\nPour répondre à la question, nous importons tout d'abord le fichier CSV téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- \"C:/Users/Jasmine/Documents/Nantes/cours/SEMESTRE 2/R avancé/my_blog_2/posts/post-with-code/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\"\ndata_ex <- read.csv(path,sep =\";\", header = TRUE)\ndata_ex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             geo_point                                             nom\n1  48.841319, 2.253076                                Parc des Princes\n2  48.924388, 2.359871                                 Stade de France\n3   48.92467, 2.332428                               Village olympique\n4   48.815115, 2.08208                           Château de Versailles\n5  48.944207, 2.424716                              Village des médias\n6  48.944643, 2.408258             Terrain des Essences - La Courneuve\n7  48.788162, 1.967776                             Colline d'Elancourt\n8  48.866041, 2.312406                                    Grand Palais\n9  48.862286, 2.313222                                       Invalides\n10 48.937188, 2.420467                      Site d'escalade du Bourget\n11   48.856262, 2.2914                                     Pont d'Iéna\n12 48.838649, 2.378496                                     Arena Bercy\n13 48.971314, 2.519183                                Arena Paris nord\n14 48.829624, 2.290777         Arena Paris Sud 6 (Porte de Versailles)\n15 48.865589, 2.321205                            Stade de la Concorde\n16 48.930873, 2.249836                            Stade Yves du Manoir\n17 48.854536, 2.300413                            Arena Champs de Mars\n18 48.857232, 2.296084                               Stade Tour Eiffel\n19 48.787261, 2.034736          Stade BMX de Saint-Quentin-en-Yvelines\n20 48.899483, 2.361803                               Arena La Chapelle\n21 48.835157, 2.257363                       Stade Pierre de Coubertin\n22 48.923457, 2.355527                                Centre aquatique\n23 48.832068, 2.284126         Arena Paris Sud 1 (Porte de Versailles)\n24 48.830231, 2.289126         Arena Paris Sud 4 (Porte de Versailles)\n25 48.856858, 2.351415                         Hôtel de ville de Paris\n26   48.89566, 2.22971                                La Défense Arena\n27 48.862229, 2.636374                                  Stade nautique\n28   48.751095, 2.0759                                   Golf national\n29 48.788046, 2.034987 Vélodrome National de Saint-Quentin-en-Yvelines\n30  48.84732, 2.245501                             Stade Roland Garros\n31 48.911184, 2.546395                                Clichy-sous-Bois\n     sites_olympiques_paralympiques\n1                    Site olympique\n2  Site olympique,Site paralympique\n3                                  \n4  Site olympique,Site paralympique\n5                                  \n6                 Site paralympique\n7                    Site olympique\n8  Site olympique,Site paralympique\n9  Site olympique,Site paralympique\n10                   Site olympique\n11                   Site olympique\n12 Site olympique,Site paralympique\n13 Site olympique,Site paralympique\n14 Site olympique,Site paralympique\n15                   Site olympique\n16                   Site olympique\n17 Site olympique,Site paralympique\n18 Site olympique,Site paralympique\n19                   Site olympique\n20 Site olympique,Site paralympique\n21                Site paralympique\n22                   Site olympique\n23 Site olympique,Site paralympique\n24 Site olympique,Site paralympique\n25                   Site olympique\n26 Site olympique,Site paralympique\n27 Site olympique,Site paralympique\n28                   Site olympique\n29 Site olympique,Site paralympique\n30 Site olympique,Site paralympique\n31                Site paralympique\n                                                             sports\n1                                                          Football\n2                                  Athlétisme,Para athlétisme,Rugby\n3                                                                  \n4               Sports équestres,Para équitation,Pentathlon moderne\n5                                                                  \n6                                                   Para athlétisme\n7                                                               VTT\n8                 Escrime,Escrime fauteuil,Taekwondo,Para taekwondo\n9        Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route\n10                                                Escalade sportive\n11                                    Cyclisme sur route,Athlétisme\n12     Basketball,Basket fauteuil,Gymnastique artistique,trampoline\n13                Boxe,Escrime,Pentathlon moderne,Volley-ball assis\n14                                  Haltérophilie,Handball,Goalball\n15                 Basketball 3x3,BMX freestyle,Breaking,Skateboard\n16                                                           Hockey\n17                              Judo,Para judo,Lutte,Rugby fauteuil\n18                                     Volleyball de plage,Cécifoot\n19                                                         BMX race\n20 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n21                                                         Goalball\n22                          Natation artistique,Plongeon,Water-polo\n23                                                Volleyball,Boccia\n24                             Tennis de table,Para tennis de table\n25                                                       Athlétisme\n26                                Natation,Para natation,Water-polo\n27                              Canoë,Para canoë,Aviron,Para aviron\n28                                                             Golf\n29                       Cyclisme sur piste,Para cyclisme sur piste\n30                                      Tennis,Tennis fauteuil,Boxe\n31                                          Para cyclisme sur route\n```\n:::\n:::\n\n\n### Etape 2 : Visualiser la base\n\nPour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble pour avoir une meilleure organisation des informations disponibles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex <- tibble::as_tibble(data_ex)\ndata_ex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 × 4\n   geo_point           nom                         sites_olympiques_par…¹ sports\n   <chr>               <chr>                       <chr>                  <chr> \n 1 48.841319, 2.253076 Parc des Princes            \"Site olympique\"       \"Foot…\n 2 48.924388, 2.359871 Stade de France             \"Site olympique,Site … \"Athl…\n 3 48.92467, 2.332428  Village olympique           \"\"                     \"\"    \n 4 48.815115, 2.08208  Château de Versailles       \"Site olympique,Site … \"Spor…\n 5 48.944207, 2.424716 Village des médias          \"\"                     \"\"    \n 6 48.944643, 2.408258 Terrain des Essences - La … \"Site paralympique\"    \"Para…\n 7 48.788162, 1.967776 Colline d'Elancourt         \"Site olympique\"       \"VTT\" \n 8 48.866041, 2.312406 Grand Palais                \"Site olympique,Site … \"Escr…\n 9 48.862286, 2.313222 Invalides                   \"Site olympique,Site … \"Tir …\n10 48.937188, 2.420467 Site d'escalade du Bourget  \"Site olympique\"       \"Esca…\n# ℹ 21 more rows\n# ℹ abbreviated name: ¹​sites_olympiques_paralympiques\n```\n:::\n:::\n\n\nAvec cet aperçu, nous pouvons voir que le tableau est constitué de 31 lignes et 4 colonnes s'intitulant respectivement ***geo_point***, ***nom*** ***sites_olympiques_paralympiques*** et ***sports***.\\\nElles sont toutes du type caractère.\n\nAutres méthodes pour obtenir ces informations :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"geo_point\"                      \"nom\"                           \n[3] \"sites_olympiques_paralympiques\" \"sports\"                        \n```\n:::\n\n```{.r .cell-code}\nstr(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [31 × 4] (S3: tbl_df/tbl/data.frame)\n $ geo_point                     : chr [1:31] \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.92467, 2.332428\" \"48.815115, 2.08208\" ...\n $ nom                           : chr [1:31] \"Parc des Princes\" \"Stade de France\" \"Village olympique\" \"Château de Versailles\" ...\n $ sites_olympiques_paralympiques: chr [1:31] \"Site olympique\" \"Site olympique,Site paralympique\" \"\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr [1:31] \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"\" \"Sports équestres,Para équitation,Pentathlon moderne\" ...\n```\n:::\n\n```{.r .cell-code}\ndim(data_ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 31  4\n```\n:::\n:::\n\n\n### Etape finale : Suppression des valeurs manquantes\n\nEn regardant celui-ci, nous remarquons la présence de valeurs manquantes pour les lignes 3 et 5. Par conséquent, nous les supprimons pour éviter d'avoir des erreurs par la suite lors des manipulations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(data_ex)\ndata_ex <- data_ex[-c(3,5),]\n```\n:::\n\n\n## Questions 3 et 4\n\nCombien y a t’il de sites olympiques ?\\\nCombien y a t’il de sites paralympiques ?\n\nPour répondre à ces questions, nous procédons à plusieurs étapes.\n\n### Etape 1 : Création de variables\n\nAu lieu de séparer notre colonne ***sites_olympiques_paralympiques***, nous décidons de créer les variables suivantes :\\\n-- ***olympique*** qui ne prend uniquement en compte les sites olympiques.\\\n-- ***paralympique*** qui ne prend uniquement en compte les sites paralympiques.\\\n-- ***mixte*** qui prend en compte tous les sites.\n\nPour ce faire, nous prenons une nouvelle version de la base initiale dans laquelle nous ajoutons les trois variables comme suit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex_1 <- data_ex |> \n  dplyr::mutate(olympique = ifelse(sites_olympiques_paralympiques== \"Site olympique\", 1, 0),\n         paralympique = ifelse(sites_olympiques_paralympiques== \"Site paralympique\", 1, 0),\n         mixte = ifelse(sites_olympiques_paralympiques %in% c(\"Site olympique,Site paralympique\"), 1, 0))\n```\n:::\n\n\nChaque variable est binaire c'est-à-dire qu'elle prend seulement 2 valeurs : 1 pour \"oui\" et \"0\" pour non.\n\nPrenons comme exemple ***olympique***, nous demandons l'ajout de la variable olympique dans le jeu de données initial prenant la valeur 1 si la cellule contient \"Site Olympique\" et 0 sinon.\n\n### Etape 2 : Compter\n\nUne fois que la création est réalisée, nous comptons le nombre de 1 et de 0 pour chaque variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data_ex_1$olympique)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 0  1 \n19 10 \n```\n:::\n\n```{.r .cell-code}\ntable(data_ex_1$paralympique)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 0  1 \n26  3 \n```\n:::\n\n```{.r .cell-code}\ntable(data_ex_1$mixte)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 0  1 \n13 16 \n```\n:::\n:::\n\n\nSur les 29 sites présents, il y a 10 sites olympiques, 3 sites paralympiques et 16 sites mixtes.\n\n### Etape finale : Suppression de la colonne \"sites_olympiques_paralympiques\"\n\nPour la suite du travail, nous prenons comme base data_ex_1 et nous supprimons par conséquent la colonne puisque les 3 colonnes créées sont plus faciles à manipuler.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex_1 <- data_ex_1[,-3]\n```\n:::\n\n\n## Question 5\n\nQuels sont les sites qui accueillent plusieurs disciplines sportives ?\n\nLa colonne ***sports*** est du même type que la colonne ***sites_olympiques_paralympiques***.\\\nPar conséquent, il faut avoir recours au même raisonnment pour y répondre.\n\n### Etape 1 : Création de la variable nb_disciplines et compter\n\nCette variable est construite de sorte que si la cellule ne contient pas de virgule alors cela signifie qu'il y a seulement une discipline. Elle prend donc la valeur \"une discipline\" et \"plusieurs disciplines\" sinon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex_2 <- data_ex_1 |> \n  dplyr::mutate(nb_disciplines = ifelse(stringr::str_count(sports,\",\")== 0, \"Une discipline\", \"Plusieurs disciplines\"))\ntable(data_ex_2$nb_disciplines)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPlusieurs disciplines        Une discipline \n                   19                    10 \n```\n:::\n:::\n\n\nIl y a au total 19 sites qui accueillent plusieurs disciplines sportives.\n\n### Etape finale : Identification des sites\n\nPour les identifier, nous filtrons la table sur plusieurs disciplines et nous demandons à ce que la colonne \"nom\" s'affiche pour obtenir les noms de ces sites :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex_2 |>\n  filter(nb_disciplines == \"Plusieurs disciplines\") |>\n  dplyr::select(nom)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 19 × 1\n   nom                                            \n   <chr>                                          \n 1 Stade de France                                \n 2 Château de Versailles                          \n 3 Grand Palais                                   \n 4 Invalides                                      \n 5 Pont d'Iéna                                    \n 6 Arena Bercy                                    \n 7 Arena Paris nord                               \n 8 Arena Paris Sud 6 (Porte de Versailles)        \n 9 Stade de la Concorde                           \n10 Arena Champs de Mars                           \n11 Stade Tour Eiffel                              \n12 Arena La Chapelle                              \n13 Centre aquatique                               \n14 Arena Paris Sud 1 (Porte de Versailles)        \n15 Arena Paris Sud 4 (Porte de Versailles)        \n16 La Défense Arena                               \n17 Stade nautique                                 \n18 Vélodrome National de Saint-Quentin-en-Yvelines\n19 Stade Roland Garros                            \n```\n:::\n:::\n\n\nNous avons maintenant à disposition tous les sites accueillant plusieurs disciplines sportives.\n\n## Question 6\n\nQuels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?\n\n### Etape 1 : Filtrer et afficher les disciplines paralympiques\n\nPour répondre à la question, nous filtrons tout d'abord la table sur les sites paralympiques et mixtes ainsi que sur les caractères faisant référence aux sports paralympiques. Puis, nous demandons à ce que les sports s'affichent en incluant les résultats dans un nouvel objet. Pour ce faire, nous faisons appel à la fonction *grepl* pour les caractères comme suit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndisciplines_para <- data_ex_2 |>\n  filter((paralympique | mixte) & (grepl(\"Para\", sports) | grepl(\"fauteuil\", sports) | grepl(\"Goalball\", sports) | grepl(\"Cécifoot\", sports))) |>\n  select(sports)\ndisciplines_para\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 17 × 1\n   sports                                                          \n   <chr>                                                           \n 1 Athlétisme,Para athlétisme,Rugby                                \n 2 Sports équestres,Para équitation,Pentathlon moderne             \n 3 Para athlétisme                                                 \n 4 Escrime,Escrime fauteuil,Taekwondo,Para taekwondo               \n 5 Tir à l'arc,Para tir à l'arc,Athlétisme,Cyclisme sur route      \n 6 Basketball,Basket fauteuil,Gymnastique artistique,trampoline    \n 7 Haltérophilie,Handball,Goalball                                 \n 8 Judo,Para judo,Lutte,Rugby fauteuil                             \n 9 Volleyball de plage,Cécifoot                                    \n10 Badminton,Para Badminton,Gymnastique rythmique,Para powerlifting\n11 Goalball                                                        \n12 Tennis de table,Para tennis de table                            \n13 Natation,Para natation,Water-polo                               \n14 Canoë,Para canoë,Aviron,Para aviron                             \n15 Cyclisme sur piste,Para cyclisme sur piste                      \n16 Tennis,Tennis fauteuil,Boxe                                     \n17 Para cyclisme sur route                                         \n```\n:::\n:::\n\n\nCependant, nous retrouvons également des disciplines non paralympiques, d'où la nécessite de réaliser l'étape suivante.\n\n### Etape finale : Séparation de la colonne \"sports\" et identification\n\nUne fois l'étape 1 réalisée, nous séparons la colonne contenant le nom des sports et nous affichons toutes les disciplines paralympiques du jeu de données.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndisciplines_para_1 <- disciplines_para |>  \n  separate_rows(sports, sep = \",\")\n\ndisciplines_para_1 |> \n  filter (grepl(\"Para\", sports) | grepl(\"fauteuil\",sports) | grepl(\"Goalball\",sports))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 1\n   sports                 \n   <chr>                  \n 1 Para athlétisme        \n 2 Para équitation        \n 3 Para athlétisme        \n 4 Escrime fauteuil       \n 5 Para taekwondo         \n 6 Para tir à l'arc       \n 7 Basket fauteuil        \n 8 Goalball               \n 9 Para judo              \n10 Rugby fauteuil         \n11 Para Badminton         \n12 Para powerlifting      \n13 Goalball               \n14 Para tennis de table   \n15 Para natation          \n16 Para canoë             \n17 Para aviron            \n18 Para cyclisme sur piste\n19 Tennis fauteuil        \n20 Para cyclisme sur route\n```\n:::\n:::\n\n\nIl y a maintenant uniquement l'affichage des sports paralympiques.\n\n## Question 7\n\nQuel(s) site(s) accueille(nt) le plus de disciplines différentes ?\n\nPour y répondre, nous repartons avec la base de données data_ex_2.\n\n### Etape 1 : Séparer la colonne \"sports\"\n\nLes disciplines sont séparées par une virgule dans chaque cellule de la colonne ***sports***. Par conséquent, nous décidons de la décomposer afin d'obtenir tous les sports de manière individuelle.\n\nPour comprendre le processus, lorsqu'une cellule dispose de 4 disciplines différentes séparées par une virgule, le logiciel va créer 4 colonnes.\n\nPour avoir des dimensions homogènes, le logiciel affiche 4 fois le même sport lorsqu'il n'y a qu'une seule discipline comme suit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsports_modif<-data.frame(do.call(\"rbind\", \n                               strsplit(as.character(data_ex_2$sports),\n                                        \",\", fixed = TRUE)))\nsports_modif\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        X1                      X2                      X3\n1                 Football                Football                Football\n2               Athlétisme         Para athlétisme                   Rugby\n3         Sports équestres         Para équitation      Pentathlon moderne\n4          Para athlétisme         Para athlétisme         Para athlétisme\n5                      VTT                     VTT                     VTT\n6                  Escrime        Escrime fauteuil               Taekwondo\n7              Tir à l'arc        Para tir à l'arc              Athlétisme\n8        Escalade sportive       Escalade sportive       Escalade sportive\n9       Cyclisme sur route              Athlétisme      Cyclisme sur route\n10              Basketball         Basket fauteuil  Gymnastique artistique\n11                    Boxe                 Escrime      Pentathlon moderne\n12           Haltérophilie                Handball                Goalball\n13          Basketball 3x3           BMX freestyle                Breaking\n14                  Hockey                  Hockey                  Hockey\n15                    Judo               Para judo                   Lutte\n16     Volleyball de plage                Cécifoot     Volleyball de plage\n17                BMX race                BMX race                BMX race\n18               Badminton          Para Badminton   Gymnastique rythmique\n19                Goalball                Goalball                Goalball\n20     Natation artistique                Plongeon              Water-polo\n21              Volleyball                  Boccia              Volleyball\n22         Tennis de table    Para tennis de table         Tennis de table\n23              Athlétisme              Athlétisme              Athlétisme\n24                Natation           Para natation              Water-polo\n25                   Canoë              Para canoë                  Aviron\n26                    Golf                    Golf                    Golf\n27      Cyclisme sur piste Para cyclisme sur piste      Cyclisme sur piste\n28                  Tennis         Tennis fauteuil                    Boxe\n29 Para cyclisme sur route Para cyclisme sur route Para cyclisme sur route\n                        X4\n1                 Football\n2               Athlétisme\n3         Sports équestres\n4          Para athlétisme\n5                      VTT\n6           Para taekwondo\n7       Cyclisme sur route\n8        Escalade sportive\n9               Athlétisme\n10              trampoline\n11       Volley-ball assis\n12           Haltérophilie\n13              Skateboard\n14                  Hockey\n15          Rugby fauteuil\n16                Cécifoot\n17                BMX race\n18       Para powerlifting\n19                Goalball\n20     Natation artistique\n21                  Boccia\n22    Para tennis de table\n23              Athlétisme\n24                Natation\n25             Para aviron\n26                    Golf\n27 Para cyclisme sur piste\n28                  Tennis\n29 Para cyclisme sur route\n```\n:::\n:::\n\n\n### Etape finale : Inclure les 4 colonnes de sports_modif et tri\n\nNous incluons les colonnes ***X1, X2, X3 et X4*** induites de l'étape précédente. Ensuite, nous regroupons par nom et nous calculons le nombre de disciplines différentes pour chaque site.\n\nPuis, nous finissons par ranger par ordre décroissant le nombre de disciplines :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex_2<- cbind(data_ex_2, sports_modif)\n\nclassement <- data_ex_2|> \n  group_by(nom) |> \n  summarise(nbre_sports = n_distinct((c(X1, X2, X3, X4)))) |> \n  arrange(desc(nbre_sports))\nclassement\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 2\n   nom                                     nbre_sports\n   <chr>                                         <int>\n 1 Arena Bercy                                       4\n 2 Arena Champs de Mars                              4\n 3 Arena La Chapelle                                 4\n 4 Arena Paris nord                                  4\n 5 Grand Palais                                      4\n 6 Invalides                                         4\n 7 Stade de la Concorde                              4\n 8 Stade nautique                                    4\n 9 Arena Paris Sud 6 (Porte de Versailles)           3\n10 Centre aquatique                                  3\n# ℹ 19 more rows\n```\n:::\n:::\n\n\nL'offre maximale de disciplines différentes est au nombre de 4.\\\nArena Brecy fait partie des sites proposant cette offre.\n\n## Question 8\n\nQuelle discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?\n\nPour y répondre, nous allons chercher la discipline qui revient le plus souvent et identifier les sites qui accueillent cette dernière.\n\n### Etape 1 : Avoir le nom de chaque disicipline et trier par ordre décroissant\n\nNous utilisons le même raisonnement que précédemment mais nous faisons appel cette fois-ci à la fonction *separate_rows* car le logiciel ne va pas remplir la case avec le premier sport lorsque le site a moins de 4 sports. En effet, si nous faisions appel à la fonction *str_split*, l'occurrence des sports serait biaisée.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex_3 <- data_ex|> separate_rows(sports, sep = \",\")\ndata_ex_3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 70 × 4\n   geo_point           nom                         sites_olympiques_par…¹ sports\n   <chr>               <chr>                       <chr>                  <chr> \n 1 48.841319, 2.253076 Parc des Princes            Site olympique         Footb…\n 2 48.924388, 2.359871 Stade de France             Site olympique,Site p… Athlé…\n 3 48.924388, 2.359871 Stade de France             Site olympique,Site p… Para …\n 4 48.924388, 2.359871 Stade de France             Site olympique,Site p… Rugby \n 5 48.815115, 2.08208  Château de Versailles       Site olympique,Site p… Sport…\n 6 48.815115, 2.08208  Château de Versailles       Site olympique,Site p… Para …\n 7 48.815115, 2.08208  Château de Versailles       Site olympique,Site p… Penta…\n 8 48.944643, 2.408258 Terrain des Essences - La … Site paralympique      Para …\n 9 48.788162, 1.967776 Colline d'Elancourt         Site olympique         VTT   \n10 48.866041, 2.312406 Grand Palais                Site olympique,Site p… Escri…\n# ℹ 60 more rows\n# ℹ abbreviated name: ¹​sites_olympiques_paralympiques\n```\n:::\n\n```{.r .cell-code}\napparitions <- table(data_ex_3$sports)\nsort(apparitions, decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n             Athlétisme                    Boxe      Cyclisme sur route \n                      4                       2                       2 \n                Escrime                Goalball         Para athlétisme \n                      2                       2                       2 \n     Pentathlon moderne              Water-polo                  Aviron \n                      2                       2                       1 \n              Badminton         Basket fauteuil              Basketball \n                      1                       1                       1 \n         Basketball 3x3           BMX freestyle                BMX race \n                      1                       1                       1 \n                 Boccia                Breaking                   Canoë \n                      1                       1                       1 \n               Cécifoot      Cyclisme sur piste       Escalade sportive \n                      1                       1                       1 \n       Escrime fauteuil                Football                    Golf \n                      1                       1                       1 \n Gymnastique artistique   Gymnastique rythmique           Haltérophilie \n                      1                       1                       1 \n               Handball                  Hockey                    Judo \n                      1                       1                       1 \n                  Lutte                Natation     Natation artistique \n                      1                       1                       1 \n            Para aviron          Para Badminton              Para canoë \n                      1                       1                       1 \nPara cyclisme sur piste Para cyclisme sur route         Para équitation \n                      1                       1                       1 \n              Para judo           Para natation       Para powerlifting \n                      1                       1                       1 \n         Para taekwondo    Para tennis de table        Para tir à l'arc \n                      1                       1                       1 \n               Plongeon                   Rugby          Rugby fauteuil \n                      1                       1                       1 \n             Skateboard        Sports équestres               Taekwondo \n                      1                       1                       1 \n                 Tennis         Tennis de table         Tennis fauteuil \n                      1                       1                       1 \n            Tir à l'arc              trampoline       Volley-ball assis \n                      1                       1                       1 \n             Volleyball     Volleyball de plage                     VTT \n                      1                       1                       1 \n```\n:::\n:::\n\n\nL'athlétisme est la discipline la plus récurrente avec 6 apparitions dont 2 en para.\n\n### Etape finale : Identification des sites\n\nIl ne reste plus qu'à filtrer sur les mots \"Athlétisme\" et \"athlétisme\" pour obtenir tous les sites ayant au moins ces disciplines :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex_3|> \n  filter(grepl(\"Athlétisme\",sports)|grepl(\"athlétisme\",sports)) |> \n  select(nom, sports)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  nom                                 sports         \n  <chr>                               <chr>          \n1 Stade de France                     Athlétisme     \n2 Stade de France                     Para athlétisme\n3 Terrain des Essences - La Courneuve Para athlétisme\n4 Invalides                           Athlétisme     \n5 Pont d'Iéna                         Athlétisme     \n6 Hôtel de ville de Paris             Athlétisme     \n```\n:::\n:::\n\n\n## Question 9 - non résolue\n\n### Etape 1 : Récupérer coordonnées GPS séparément\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ex_4 <- data_ex |> separate(geo_point, into=c(\"lon\",\"lat\"),sep = \", \", remove = FALSE)\n\nlocalisation <- data_ex_4[,c(2,3,4)] #ne prendre que les colonnes \"nom\", \"lon\" et \"lat\"\nstr(localisation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [29 × 3] (S3: tbl_df/tbl/data.frame)\n $ lon: chr [1:29] \"48.841319\" \"48.924388\" \"48.815115\" \"48.944643\" ...\n $ lat: chr [1:29] \"2.253076\" \"2.359871\" \"2.08208\" \"2.408258\" ...\n $ nom: chr [1:29] \"Parc des Princes\" \"Stade de France\" \"Château de Versailles\" \"Terrain des Essences - La Courneuve\" ...\n```\n:::\n\n```{.r .cell-code}\n#Convertir en numérique\nlocalisation$lon <- as.numeric(localisation$lon)\nlocalisation$lat <- as.numeric(localisation$lat)\n```\n:::\n\n\n### Etape 2 : calculer les distances\n\nLa fonction *distHaversine* permet de calculer la plus petite distance entre 2 points.\\\nIci, nous calculons les distances à l'aide de la longitude et de la latitude :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistance <- distHaversine(localisation[,c(\"lon\", \"lat\")])\ndistance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 15056.7389 33226.6717 39064.0691 52032.1736 39330.0598   427.4280\n [7] 14557.8613 16954.3051  9891.4218 21516.8494 29913.6785  5241.7774\n[13] 10763.3665 10188.1278   567.5872 30116.3397 38489.5146 13651.4314\n[19] 14692.6679 12903.6370   592.9181  7539.9991 14218.9884 45422.0657\n[25] 63604.3467  6135.2023 24344.2892 34240.2309\n```\n:::\n:::\n\n\n# Exercice - semaine 2\n\nNous faisons appel aux différents packages nécessaires\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(purrr)\nlibrary(dplyr)\n```\n:::\n\n\n## Question 1\n\nLancez la commande suivante\\\nQue s’est-il passé ? Que contient l’objet list_tables ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_tables <-\n  session(\"https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques\") |>\n  html_elements(\".wikitable\") |> #permet de sélectionner les éléments du document HTML \n  html_table() #renvoie un tableau\n```\n:::\n\n\nCette commande renvoie la liste de tous les médaillés olympiques depuis 1896, disponible sur wikipédia que nous incorporons dans l'objet list_table.\\\nCe dernier est une liste de 6 listes, étant chacune un tibble.\n\n## Question 2\n\nNous allons tout d’abord nous intéresser à la première table.\n\nCréez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables.\n\nLa table n’est pas bien formattée.\\\nSupprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c(\"Discipline\", \"Annees\", \"Editions\", \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\", \"Total\", \"Athletes_medailles\", \"Athletes_or\").\n\nLes colonnes ***Editions, Epreuves_2020, Or, Argent, Bronze, Total*** seront converties en colonnes d’entiers.\n\n### Etape 1 : Extraction de la première liste de la liste\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- list_tables[[1]]\ndata_medailles_sport_ete\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 × 11\n   Discipline   Discipline   Années `Nombre de` `Nombre de` `médailles décernés`\n   <chr>        <chr>        <chr>  <chr>       <chr>       <chr>               \n 1 \"Discipline\" Discipline   Années Éditions    Épreuves(e… Or                  \n 2 \"\"           Athlétisme   Depui… 29          48          1028                \n 3 \"\"           Aviron       Depui… 28          14          269                 \n 4 \"\"           Badminton    Depui… 8           5           39                  \n 5 \"\"           Basket-ball  Depui… 20          4           32                  \n 6 \"\"           Boxe         1904,… 26          13          266                 \n 7 \"\"           Canoë-kayak  Depui… 20          16          242                 \n 8 \"\"           Cyclisme(ho… Depui… 29          22          263                 \n 9 \"\"           Équitation   1900,… 26          6           151                 \n10 \"\"           Escrime      Depui… 29          12          223                 \n# ℹ 21 more rows\n# ℹ 5 more variables: `médailles décernés` <chr>, `médailles décernés` <chr>,\n#   `médailles décernés` <chr>,\n#   `Athlète(s) avec le plus de médailles (Or-Argent-Bronze)` <chr>,\n#   `Athlète(s) avec le plus de médailles d'or` <chr>\n```\n:::\n:::\n\n\n## Etape 2 : Manipulations sur cette sous-liste\n\nNous allons réaliser plusieurs manipulations :\\\n-- Suppression de la première colonne\\\n-- Suppression de la première ligne\\\n-- Renommer les colonnes\\\n-- Mettre en entiers ***Editions***, ***Epreuves_2020***, ***Or***, ***Argent***, ***Bronze*** et ***Total***.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete <- data_medailles_sport_ete[, -1]\n\ndata_medailles_sport_ete <- data_medailles_sport_ete[-1, ]\n\ncolnames(data_medailles_sport_ete) <- c(\n  \"Discipline\", \"Annees\", \"Editions\",\n  \"Epreuves_2020\", \"Or\", \"Argent\", \"Bronze\",\n  \"Total\", \"Athletes_medailles\",\n  \"Athletes_or\"\n)\n\ndata_medailles_sport_ete[, c(3:8)] <- lapply(data_medailles_sport_ete[, c(3:8)], as.integer)\n```\n:::\n\n\n### Etape finale : Vérifier le type des variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data_medailles_sport_ete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [30 × 10] (S3: tbl_df/tbl/data.frame)\n $ Discipline        : chr [1:30] \"Athlétisme\" \"Aviron\" \"Badminton\" \"Basket-ball\" ...\n $ Annees            : chr [1:30] \"Depuis 1896\" \"Depuis 1900\" \"Depuis 1992\" \"Depuis 1936\" ...\n $ Editions          : int [1:30] 29 28 8 20 26 20 29 26 29 27 ...\n $ Epreuves_2020     : int [1:30] 48 14 5 4 13 16 22 6 12 2 ...\n $ Or                : int [1:30] 1028 269 39 32 266 242 263 151 223 34 ...\n $ Argent            : int [1:30] 1030 268 39 32 266 241 261 149 223 34 ...\n $ Bronze            : int [1:30] 1027 273 43 32 472 243 260 148 221 35 ...\n $ Total             : int [1:30] 3085 810 121 96 1004 726 784 448 667 103 ...\n $ Athletes_medailles: chr [1:30] \"Paavo Nurmi (FIN) (9-3-0)\" \"Elisabeta Lipă (ROU) (5-2-1)\" \"Gao Ling (CHN) (2-1-1)\" \"Teresa Edwards (USA) (4-0-1)\" ...\n $ Athletes_or       : chr [1:30] \"Paavo Nurmi (FIN) (9-3-0) Carl Lewis (USA) (9-1-0)\" \"Elisabeta Lipă (ROU) (5-2-1) Georgeta Damian (ROU) (5-0-1) Steven Redgrave (GBR) (5-0-1)\" \"Gao Ling (CHN) (2-1-1) Kim Dong-moon (KOR) (2-0-1) Zhang Nan (CHN) (2-0-1) Ge Fei (CHN) (2-0-0) Gu Jun (CHN) (2\"| __truncated__ \"Teresa Edwards (USA) (4-0-1) Sue Bird (USA) (4-0-0) Tamika Catchings (USA) (4-0-0) Lisa Leslie (USA) (4-0-0) Di\"| __truncated__ ...\n```\n:::\n:::\n\n\nMaintenant que le nettoyage et le formatage sont réalisés, le jeu de données est prêt pour l'analyse.\n\n## Question 3\n\nQuelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?\n\nPour faire le top 3 des disciplines ayant le plus de médaillés, nous faisons appel à la fonction *slice_max* de **dplyr** qui permet ici de sélectionner les trois lignes ayant les trois meilleurs totaux de médailles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete |> dplyr::slice_max(Total, n=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 10\n  Discipline             Annees Editions Epreuves_2020    Or Argent Bronze Total\n  <chr>                  <chr>     <int>         <int> <int>  <int>  <int> <int>\n1 Athlétisme             Depui…       29            48  1028   1030   1027  3085\n2 Natation(hommes, femm… Depui…       29            37   607    604    603  1814\n3 Lutte                  1896,…       28            18   430    429    499  1358\n# ℹ 2 more variables: Athletes_medailles <chr>, Athletes_or <chr>\n```\n:::\n:::\n\n\nL'athlétisme, la natation et la lutte sont les disciplines ayant eu le plus de médaillés.\n\n## Question 4\n\nQuelles sont les 6 disciplines avec le moins d’épreuves en 2020 ?\n\nMême raisonnement mais à l'inverse. Par conséquent, nous utilisons la fonction *slice_min* qui permet de sélectionner les 6 sports ayant eu le moins d'épreuves en 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_medailles_sport_ete |> dplyr::slice_min(Epreuves_2020, n=6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 10\n  Discipline            Annees  Editions Epreuves_2020    Or Argent Bronze Total\n  <chr>                 <chr>      <int>         <int> <int>  <int>  <int> <int>\n1 Football              1900–1…       27             2    34     34     35   103\n2 Golf                  1900–1…        4             2     8      8      9    19\n3 Handball              1936,d…       14             2    26     26     26    78\n4 Hockey sur gazon      1908, …       24             2    35     35     36   106\n5 Natation synchronisée Depuis…       10             2    20     18     19    57\n6 Pentathlon moderne    Depuis…       25             2    42     42     42   126\n7 Volley-ball           Depuis…       15             2    30     30     30    90\n8 Water polo            1900,d…       26             2    28     28     29    85\n# ℹ 2 more variables: Athletes_medailles <chr>, Athletes_or <chr>\n```\n:::\n:::\n\n\nLes disciplines ayant comptabilisé au plus 2 épreuves sont au nombre de 8.\n\n## Question 5 - non résolue\n\nLa colonne ***Editions*** nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été.\\\nNous souhaitons vérifier ce calcul en implémentant notre propre fonction *calcul_nb_editions_int*.\\\nDans un premier temps, la fonction *calcul_nb_editions* prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.\n\n### Etape 1 : Se familiariser avec la colonne Annees\n\nAvant de construire une fonction impliquant des paramètres issus de la base de données, il est nécessaire de comprendre la logique en se focalisant sur la colonne qui permet de définir la fonction, ici : ***Annees***.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(data_medailles_sport_ete$Annees)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Depuis 1896\"                      \"Depuis 1900\"                     \n [3] \"Depuis 1992\"                      \"Depuis 1936\"                     \n [5] \"1904, 1908,depuis 1920\"           \"1900,depuis 1912\"                \n [7] \"1900–1928,depuis 1936\"            \"1900–1904,depuis 2016\"           \n [9] \"1936,depuis 1972\"                 \"1896, 1904,depuis 1920\"          \n[11] \"1908, 1920,depuis 1928\"           \"1964,depuis 1972\"                \n[13] \"1896,depuis 1904\"                 \"Depuis 1984\"                     \n[15] \"Depuis 1912\"                      \"Depuis 1904\"                     \n[17] \"Depuis 2000\"                      \"1896–1924,depuis 1988\"           \n[19] \"Depuis 1988\"                      \"1896, 1900,1908–1924,depuis 1932\"\n[21] \"1900-1912, 1920,depuis 1972\"      \"1900,depuis 1908\"                \n[23] \"Depuis 1964\"                     \n```\n:::\n:::\n\n\nAvec cette ligne de code, nous pouvons voir qu'il existe plusieurs formats de remplissage. Nous devons alors trouver une fonction qui puisse les traiter au cas par cas.\n\n### Etape 2 : Méthodes pour les extractions\n\n#### Cellules avec des virgules\n\nPrenons un exemple disposant de tous les formats :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"1896, 1900,1908-1924,depuis 1932\"\n```\n:::\n\n\nLa première chose à faire est de séparer chaque élément lorsque nous voyons une virgule.\n\nCela donne :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- str_split(x,\",\",simplify = TRUE)\nr\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]   [,2]    [,3]        [,4]         \n[1,] \"1896\" \" 1900\" \"1908-1924\" \"depuis 1932\"\n```\n:::\n:::\n\n\nr est une matrice et nous avons :\\\n-- \"1896\"\\\n-- \" 1900\"\\\n-- \"1908-1924\"\\\n-- \"depuis 1932\"\\\nChaque élément dispose d'un format différent qui doit être traité de manière adéquate.\n\n#### Une année uniquement\n\nL'année 1896 se situe à la première ligne et première colonne. Ainsi, une simple sélection de la manière suivante suffit pour l'extraire.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr[1,1] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1896\"\n```\n:::\n:::\n\n\n#### Une année avec un espace\n\nPour l'extraction d'une année avec un espace, il suffit de mettre le type de l'élément en entier. L'année 1900 est sur la première ligne, deuxième colonne.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(r[1,2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1900\n```\n:::\n:::\n\n\n#### Années séparées par un -\n\nPour l'extraction des années, il suffit d'avoir recours à une expression *regex* ainsi qu'à la fonction *str_extract_all* comme suit.\n\nNous nous concentrons sur l'élément se trouvant sur la première ligne et troisième colonne.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(r[1,3],\"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"1908\" \"1924\"\n```\n:::\n:::\n\n\n#### Années avec depuis\n\nPour enlever le \"depuis\", il suffit de faire la ligne de code précédente car cette dernière ne prend en compte que les caractères numériques.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(\"depuis 1932\",\"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"1932\"\n```\n:::\n:::\n\n\n### Etape 3 : Créer une fonction\n\nNous avons seulement réalisé les extractions pour la discipline \"tir\".\n\nNous souhaiterions faire le même travail pour chaque cellule et comme nous l'avons vu précédemment chaque cellule a des formats différents.\n\nPar conséquent, il faut créer une fonction qui va combiner toutes ces méthodes d'extraction à l'aide de boucles for. Cependant, je n'ai malheureusement pas réussi à la réaliser. Je n'ai également pas réussi à faire les autres questions.\n\nPlace maintenant à l'exercice suivant.\n\n# Exercice - semaine 3\n\nNous importons les différents packages qui vont nous être utiles pour réaliser cette excercice.\\\nNous ignorons le fichier CSV qui vient de l'exercice 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(arrow)\nlibrary(jsonlite)\nlibrary(DBI)\nlibrary(RSQLite)\n```\n:::\n\n\n## Question 1\n\nListez les fichiers présents dans le dossier data.\\\nQuelles sont les extensions des différents fichiers ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(\"data/\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n:::\n\n\nLes extensions des différents fichiers sont json, sqlite et parquet.\n\n## Question 2\n\nLisez le fichier .parquet en utilisant la librairie **arrow**. Quelles sont les dimensions de la table ?\\\nQuelles sont les colonnes présentes ?\n\n### Etape 1 : Importation\n\nPour répondre à la question, nous importons tout d'abord le fichier parquet téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices* à l'aide la fonction *read_parquet* qui se trouve dans le package **arrow**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_athletes <- arrow :: read_parquet(\"C:/Users/Jasmine/Documents/Nantes/cours/SEMESTRE 2/R avancé/my_blog_2/posts/post-with-code/tokyo_athletes.parquet\")\n```\n:::\n\n\n### Etape finale : Visualiser la base\n\nPour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble (cf. exercice 1).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntokyo_athletes <- tibble::as_tibble(tokyo_athletes)\ntokyo_athletes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11,085 × 3\n   Name              NOC                      Discipline         \n   <chr>             <chr>                    <chr>              \n 1 AALERUD Katrine   Norway                   Cycling Road       \n 2 ABAD Nestor       Spain                    Artistic Gymnastics\n 3 ABAGNALE Giovanni Italy                    Rowing             \n 4 ABALDE Alberto    Spain                    Basketball         \n 5 ABALDE Tamara     Spain                    Basketball         \n 6 ABALO Luc         France                   Handball           \n 7 ABAROA Cesar      Chile                    Rowing             \n 8 ABASS Abobakr     Sudan                    Swimming           \n 9 ABBASALI Hamideh  Islamic Republic of Iran Karate             \n10 ABBASOV Islam     Azerbaijan               Wrestling          \n# ℹ 11,075 more rows\n```\n:::\n:::\n\n\nLe tableau est composé de 11 085 athlètes et de 3 colonnes s'intitulant \"Name\", \"NOC\" et \"Discipline\".\n\n## Question 3\n\nLisez le fichier .json en utilisant la librairie jsonlite.\\\nQuelles sont les dimensions de la table ?\\\nQuelles sont les colonnes présentes ?\n\n### Etape 1 : Importation\n\nPour répondre à la question, nous importons tout d'abord le fichier json téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices* à l'aide la fonction *read_json* qui se trouve dans le package **jsonlite**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes<- jsonlite::read_json(\"C:/Users/Jasmine/Documents/Nantes/cours/SEMESTRE 2/R avancé/my_blog_2/posts/post-with-code/olympics_athletes.json\", simplifyVector = TRUE)\n```\n:::\n\n\n### Etape finale : Visualiser la base\n\nPour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble (cf. exercice 1).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- tibble::as_tibble(olympics_athletes)\nolympics_athletes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <chr> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n:::\n\n\nLa table est composée de 269 731 athlètes et des 13 colonnes suivantes :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n## Question 4\n\nImportez la librairie **RSQLite**, et ouvrez une connexion à la base de données sqlite en utilisant la fonction *dbConnec*t. Le driver à utiliser sera SQLite().\\\nQuelles sont les tables présentes dans la table ?\\\nVous pourrez utiliser la fonction dbListTables.\n\nLa lecture d'un fichier sqlite est particulière et nécessite d'avoir recours à d'autres méthodes.\n\n### Etape 1 : Ouverture d'une connexion\n\nPour lire un fichier sqlite, il faut établir une connexion avec ce dernier à l'aide de la fonction *dbConnect* du package **DBI**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(RSQLite::SQLite(), dbname = \"C:/Users/Jasmine/Documents/Nantes/cours/SEMESTRE 2/R avancé/my_blog_2/posts/post-with-code/data.sqlite\")\ncon\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<SQLiteConnection>\n  Path: C:\\Users\\Jasmine\\Documents\\Nantes\\cours\\SEMESTRE 2\\R avancé\\my_blog_2\\posts\\post-with-code\\data.sqlite\n  Extensions: TRUE\n```\n:::\n:::\n\n\n### Etape 2 : Liste des tables présentes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListTables(con)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"olympics_athletes\" \"tokyo_athletes\"    \"tokyo_medals\"     \n[4] \"tokyo_teams\"      \n```\n:::\n:::\n\n\nLes tables présentes sont \"tokyo_medals\" et \"tokyo_teams\".\n\n## Question 5\n\nCréez deux nouvelles tables dans la base de données à l’aide de la fonction *dbWriteTable*.\\\nLes tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.\n\nPour la création des 2 nouvelles tables, nous faisons appel à la fonction *dbWriteTable* de la manière suivante :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#dbWriteTable(con,\"tokyo_athletes\",tokyo_athletes)\n#dbWriteTable(con,name = \"olympics_athletes\",value = olympics_athletes)\n```\n:::\n\n\nLe premier argument est la connexion définie précédemment.\\\nLe deuxième argument est le nom de la nouvelle table.\\\nLe troisième argument est le nom de la data dans laquelle le fichier a été importé. (cf questions 2 et 3)\n\n## Question 6\n\nInspectez la table olympics_athletes en utilisant la fonction *dbListFields*.\\\nQuelles sont les colonnes de la table ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbListFields(con,\"olympics_athletes\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"     \"Name\"   \"Sex\"    \"Age\"    \"Height\" \"Weight\" \"Team\"   \"NOC\"   \n [9] \"Games\"  \"City\"   \"Sport\"  \"Event\"  \"Medal\" \n```\n:::\n:::\n\n\n## Question 7\n\nImportez cette table depuis la base de données en utilisant la fonction *dbReadTable*.\\\nConvertissez la table en tibble en utilisant la fonction *as_tibble*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndbReadTable(con,\"olympics_athletes\") |> view()\n\nolympics_athletes <- as_tibble(dbReadTable(con,\"olympics_athletes\"))\nolympics_athletes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <chr> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n\n```{.r .cell-code}\ndbDisconnect(con) \n```\n:::\n\n\nLa fermeture de la connexion avec *dbDisconnect* est nécessaire puisque nous n'allons plus utiliser cette dernière par la suite.\n\n## Question 8\n\nConvertissez la colonne ***Sex*** en variable catégorielle avec la fonction *mutate*.\n\nUne variable catégorielle est vue comme un facteur sur le logiciel, c'est-à-dire qu'elle dispose d'un nombre limité de modalités. Ici, la variable ***Sex*** n'a que 2 modalités. Par conséquent, la transformer en facteur est cohérent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> mutate(Sex=factor(Sex))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 269,731 × 13\n      ID Name      Sex     Age Height Weight Team  NOC   Games City  Sport Event\n   <int> <chr>     <fct> <int>  <int>  <dbl> <chr> <chr> <chr> <chr> <chr> <chr>\n 1     1 A Dijiang M        24    180     80 China CHN   1992… Barc… Bask… Bask…\n 2     2 A Lamusi  M        23    170     60 China CHN   2012… Lond… Judo  Judo…\n 3     3 Gunnar N… M        24     NA     NA Denm… DEN   1920… Antw… Foot… Foot…\n 4     4 Edgar Li… M        34     NA     NA Denm… DEN   1900… Paris Tug-… Tug-…\n 5     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 6     5 Christin… F        21    185     82 Neth… NED   1988… Calg… Spee… Spee…\n 7     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 8     5 Christin… F        25    185     82 Neth… NED   1992… Albe… Spee… Spee…\n 9     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n10     5 Christin… F        27    185     82 Neth… NED   1994… Lill… Spee… Spee…\n# ℹ 269,721 more rows\n# ℹ 1 more variable: Medal <chr>\n```\n:::\n:::\n\n\n## Question 9\n\nCréez deux colonnes à partir de la colonne ***Games***. La première colonne ***Year*** sera une colonne de type integer contenant l’année des jeux.\\\nLa deuxième colonne ***isSummer*** sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver.\\\nVous pourrez utiliser la fonction *separate_wider_delim* de **tidyr** notamment.\n\n### Etape 1 : Observer la colonne Games et séparation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(olympics_athletes$Games)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1992 Summer\" \"2012 Summer\" \"1920 Summer\" \"1900 Summer\" \"1988 Winter\"\n[6] \"1988 Winter\"\n```\n:::\n\n```{.r .cell-code}\nolympics_athletes <- olympics_athletes |> separate_wider_delim(Games, delim = \" \", names = c(\"Year\", \"isSummer\"))\n\ncolnames(olympics_athletes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"       \"Name\"     \"Sex\"      \"Age\"      \"Height\"   \"Weight\"  \n [7] \"Team\"     \"NOC\"      \"Year\"     \"isSummer\" \"City\"     \"Sport\"   \n[13] \"Event\"    \"Medal\"   \n```\n:::\n:::\n\n\nLes années et saisons sont séparées par un espace dans les cellules de la colonne ***Games***.\\\nLe logiciel crée les 2 variables ***Year*** et ***isSummer***.\\\nLa première variable prend les valeurs se trouvant à gauche de l'espace.\\\nLa deuxième variable prend les valeurs se trouvant à droite de l'espace.\n\n### Etape 2 : Changer le type de la variable Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(olympics_athletes$Year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n chr [1:269731] \"1992\" \"2012\" \"1920\" \"1900\" \"1988\" \"1988\" \"1992\" \"1992\" ...\n```\n:::\n\n```{.r .cell-code}\nolympics_athletes$Year <- as.integer(olympics_athletes$Year)\n```\n:::\n\n\n### Etape 3 : Observation et transformer la variable isSummer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(olympics_athletes$isSummer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Summer\" \"Winter\"\n```\n:::\n:::\n\n\nLa variable prend ces 2 modalités.\\\nNous allons par conséquent lui associer les valeurs 1 et 0 de la manière suivante :\\\n-- 1 si la modalité vaut \"Summer\"\\\n-- 0 sinon\n\nNous finissons par la transformer en facteur.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes <- olympics_athletes |> mutate(isSummer= ifelse(isSummer == \"Summer\", 1, 0))\nolympics_athletes$isSummer <- as.factor(olympics_athletes$isSummer)\n```\n:::\n\n\n## Question 10\n\nCalculez la moyenne d’age des athletes pour chacune des éditions des JO d’été.\\\nQuelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?\n\nAvant de calculer la moyenne ou toute autre statistique de base, il faut faire attention à la présence de valeurs manquantes. En effet, le résultat renverra un résultat nul si des valeurs manquantes sont introduites dans le calcul.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(is.na(olympics_athletes$Age))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9315\n```\n:::\n:::\n\n\nLa variable ***Age*** a bien 9315 valeurs manquantes. Par conséquent, il faut préciser la suppression des valeurs manquantes dans la formule de la moyenne.\n\n### Etape 1 : Calcul de l'âge moyen global\n\nAvant de calculer l'âge moyen des athlètes pour chacune des éditions, nous trouvons intéressant de calculer l'âge moyen global\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> \n  filter(isSummer==\"1\") |> \n  summarise(moy_age=mean(Age,na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  moy_age\n    <dbl>\n1    25.5\n```\n:::\n:::\n\n\nLa moyenne d'âge sur l'ensemble des JO d'été est de 25,5 ans.\n\n### Etape 2 : Age moyen pour chaque édition\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> \n  filter(isSummer==\"1\") |> \n  group_by(Year) |> \n  summarise(moy_age=mean(Age,na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 2\n    Year moy_age\n   <int>   <dbl>\n 1  1896    23.6\n 2  1900    28.9\n 3  1904    26.7\n 4  1906    27.1\n 5  1908    27.0\n 6  1912    27.5\n 7  1920    29.3\n 8  1924    28.1\n 9  1928    28.0\n10  1932    30.2\n# ℹ 19 more rows\n```\n:::\n:::\n\n\n### Etape 3 : Tri par ordre décroissant de l'âge moyen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> \n  filter(isSummer==\"1\") |> \n  group_by(Year) |> \n  summarise(moy_age=mean(Age,na.rm = TRUE)) |> \n  arrange(desc(moy_age)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 2\n    Year moy_age\n   <int>   <dbl>\n 1  1932    30.2\n 2  1920    29.3\n 3  1900    28.9\n 4  1948    28.8\n 5  1924    28.1\n 6  1928    28.0\n 7  1912    27.5\n 8  1936    27.2\n 9  1906    27.1\n10  1908    27.0\n# ℹ 19 more rows\n```\n:::\n:::\n\n\nL'édition de 1932 a compté les plus vieux athlètes avec une moyenne d'âge de 30,2 ans.\n\n### Etape finale : Tri par ordre croissant de l'âge moyen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> \n  filter(isSummer==\"1\") |> \n  group_by(Year) |> \n  summarise(moy_age=mean(Age,na.rm = TRUE)) |> \n  arrange((moy_age))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 2\n    Year moy_age\n   <int>   <dbl>\n 1  1896    23.6\n 2  1980    23.7\n 3  1976    23.9\n 4  1984    24.0\n 5  1988    24.1\n 6  1968    24.3\n 7  1972    24.3\n 8  1992    24.4\n 9  1996    24.9\n10  1964    25.1\n# ℹ 19 more rows\n```\n:::\n:::\n\n\nL'édition de 1896 a compté les plus jeunes athlètes avec une moyenne d'âge de 23,6 ans.\n\n## Question 11\n\nQuelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ?\\\nQuelle a été cette discipline au cours de chacune des éditions ?\\\nCalculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n### Etape 1 : Tri par ordre décroissant de la taille\n\nPour répondre à la première question, nous filtrons sur les JO d'été et le sexe féminin puis nous trions par ordre décroissant la taille sur l'ensemble des éditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> \n  filter(isSummer==\"1\" & Sex ==\"F\") |> \n  arrange(desc(Height)) |> \n  select(Height,Sport) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 59,299 × 2\n   Height Sport     \n    <int> <chr>     \n 1    213 Basketball\n 2    210 Basketball\n 3    210 Basketball\n 4    206 Basketball\n 5    205 Basketball\n 6    205 Basketball\n 7    204 Volleyball\n 8    204 Basketball\n 9    204 Basketball\n10    204 Basketball\n# ℹ 59,289 more rows\n```\n:::\n:::\n\n\nSur la plupart des éditions, le basketball est la discipline qui a comptabilisé la plus grande taille.\n\n### Etape 2 : Tri par ordre décroissant selon les années\n\nPour répondre à la seconde question, nous réalisons la même manipulation en y ajoutant le regroupement par années comme suit :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> \n  filter(isSummer==\"1\"& Sex ==\"F\") |>\n  group_by(Year) |> \n  arrange(desc(Height)) |> \n  select(Height,Sport) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `Year`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 59,299 × 3\n# Groups:   Year [28]\n    Year Height Sport     \n   <int>  <int> <chr>     \n 1  2000    213 Basketball\n 2  1976    210 Basketball\n 3  1980    210 Basketball\n 4  2012    206 Basketball\n 5  1984    205 Basketball\n 6  1984    205 Basketball\n 7  2000    204 Volleyball\n 8  1984    204 Basketball\n 9  1988    204 Basketball\n10  1992    204 Basketball\n# ℹ 59,289 more rows\n```\n:::\n:::\n\n\nUne majorité des éditions a enregistré le basketball comme étant la discipline qui a enregisté la plus grande taille.\n\n### Etape finale : Calcul du nombre d'occurrences\n\nPour répondre à la dernière question, nous filtrons en triant la taille par ordre décroissant et nous demandons au logiciel de compter le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nolympics_athletes |> \n  filter(isSummer==\"1\" & Sex ==\"F\") |> \n  arrange(desc(Height)) |> \n  count(Sport, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 × 2\n   Sport          n\n   <chr>      <int>\n 1 Athletics  11666\n 2 Swimming    9850\n 3 Gymnastics  9129\n 4 Rowing      2193\n 5 Fencing     2000\n 6 Shooting    1724\n 7 Volleyball  1543\n 8 Hockey      1459\n 9 Handball    1401\n10 Cycling     1394\n# ℹ 30 more rows\n```\n:::\n:::\n\n\nL'athlétisme a été 11 666 fois la discipline avec les plus grandes athlètes.\n\n## Question 12\n\nEn utilisant les fonctions du package **stringr**, extrayez les dates des différentes éditions des JO.\n\nAide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que “26 Juillet 2024”.\\\nVous pourrez utiliser cette *regex* avec la fonction *str_extract_all* par exemple.\n\n### Etape 1 : Recopier le texte\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntexte <- c(\"Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois\nde Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,\nceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du\n26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde\nentier à Paris.\")\n```\n:::\n\n\n### Etape 2 : Extraire les dates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregex_date <- \"\\\\b\\\\d{1,2}\\\\s(?:Juillet|Août)\\\\s\\\\d{4}\\\\b\"\ndates <- str_extract_all(texte, regex_date)[[1]]\ndates\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\nL'expression régulière est définie comme telle :\\\n-- d{1,2} signifie l'extraction d'1 ou 2 chiffres pour le jour\\\n-- s permet de mettre un espace\\\n-- (?:Juillet\\|Août)\" correspond au mois écrit en toutes lettres. Ce dernier peut être soit \"Juillet\" soit \"Août\".\\\n-- d{4} signifie l'extraction de 4 chiffres pour l'année\n\n## Question 13\n\nRemplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction *str_replace*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates |> str_replace_all(c(\"Juillet\" = \"07\", \"Août\"=\"08\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 08 2016\"  \"20 08 2016\" \"23 07 2021\" \"8 08 2021\"  \"26 07 2024\"\n[6] \"11 08 2024\"\n```\n:::\n:::\n\n\n## Question 14\n\nConvertissez ces 3 éléments en date en utilisant la fonction appropriée du package **lubridate**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndmy(dates)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2016-08-05\" \"2016-08-20\" \"2021-07-23\" \"2021-08-08\" \"2024-07-26\"\n[6] \"2024-08-11\"\n```\n:::\n\n```{.r .cell-code}\ndates\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5 Août 2016\"     \"20 Août 2016\"    \"23 Juillet 2021\" \"8 Août 2021\"    \n[5] \"26 Juillet 2024\" \"11 Août 2024\"   \n```\n:::\n:::\n\n\n## Question 15\n\nCombien de jours ont séparés les éditions de Rio et Tokyo ?\\\nEt sépareront les éditions de Tokyo et de Paris ?\\\nFaites le même calcul en semaines.\n\n### Etape 1 : Calcul du nombre de jours séparant les éditions Rio et Tokyo\n\nPour calculer les jours, nous calculons la différence entre la date de fin de l'édition de Rio et la date de début de l'édition de Tokyo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nint <- interval(ymd(\"2016-08-20\"), ymd(\"2021-07-23\"))\ntime_length(int, unit = \"days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1798\n```\n:::\n:::\n\n\n1798 jours ont séparés ces deux éditions.\n\n### Etape 2 : Calcul du nombre de semaines\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_length(int, unit = \"weeks\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 256.8571\n```\n:::\n:::\n\n\nIl y a environ 256 semaines entre ces deux éditions.\n\n### Etape 3 : Calcul du nombre de jours séparant les éditions Tokyo et Paris\n\nPour calculer les jours, nous calculons la différence entre la date de fin de l'édition de Tokyo et la date de début de l'édition de Paris.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nint2 <- interval(ymd(\"2021-08-08\"), ymd(\" 2024-07-26\"))\ntime_length(int2, unit = \"days\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1083\n```\n:::\n:::\n\n\n1083 jours séparent ces deux éditions.\n\n### Etape finale : Calcul du nombre de semaines\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_length(int2, unit = \"weeks\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 154.7143\n```\n:::\n:::\n\n\nIl y a environ 154 semaines entre ces deux éditions.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}