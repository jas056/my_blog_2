---
title: "Exercices"
author: "Jasmine Dupau"
date: "2024-03-07"
---

# Objectifs du travail

La réalisation des exercices a permis de pratiquer toutes les notions vues en cours de R avancé passant de la manipulation de données à la création d'un package (article dédié sur le blog).

Chaque exercice va être présenter de la manière suivante :\
-- Questions précises\
-- Réponses avec le code et des commentaires pour faciliter la compréhension

Tous les exercices ont été effectués à partir de bases de données centrées sur les jeux olympiques téléchargeables sur internet.

# Exercice - semaine 1

Nous faisons appel aux différents packages nécessaires

```{r}
#| warning: false
library(tidyverse)
library(geosphere)
library(tibble)
library(dplyr)
library(stringr)
```

## Question 2

Lisez le fichier téléchargé avec la fonction *read.table*. Le résultat sera affecté à l’objet ayant pour nom data_ex. Le jeux de données contient 4 colonnes.\
Quels sont les noms et la nature des colonnes ?\
Combien de lignes contient la data.frame ?

### Etape 1 : Importation

Pour répondre à la question, nous importons tout d'abord le fichier CSV téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices*.

```{r}
path <- "C:/Users/Jasmine/Documents/Nantes/cours/SEMESTRE 2/R avancé/my_blog_2/posts/post-with-code/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv"
data_ex <- read.csv(path,sep =";", header = TRUE)
data_ex
```

### Etape 2 : Visualiser la base

Pour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble pour avoir une meilleure organisation des informations disponibles.

```{r}
data_ex <- tibble::as_tibble(data_ex)
data_ex
```

Avec cet aperçu, nous pouvons voir que le tableau est constitué de 31 lignes et 4 colonnes s'intitulant respectivement ***geo_point***, ***nom*** ***sites_olympiques_paralympiques*** et ***sports***.\
Elles sont toutes du type caractère.

Autres méthodes pour obtenir ces informations :

```{r}
colnames(data_ex)
str(data_ex)
dim(data_ex)
```

### Etape finale : Suppression des valeurs manquantes

En regardant celui-ci, nous remarquons la présence de valeurs manquantes pour les lignes 3 et 5. Par conséquent, nous les supprimons pour éviter d'avoir des erreurs par la suite lors des manipulations.

```{r}
View(data_ex)
data_ex <- data_ex[-c(3,5),]
```

## Questions 3 et 4

Combien y a t’il de sites olympiques ?\
Combien y a t’il de sites paralympiques ?

Pour répondre à ces questions, nous procédons à plusieurs étapes.

### Etape 1 : Création de variables

Au lieu de séparer notre colonne ***sites_olympiques_paralympiques***, nous décidons de créer les variables suivantes :\
-- ***olympique*** qui ne prend uniquement en compte les sites olympiques.\
-- ***paralympique*** qui ne prend uniquement en compte les sites paralympiques.\
-- ***mixte*** qui prend en compte tous les sites.

Pour ce faire, nous prenons une nouvelle version de la base initiale dans laquelle nous ajoutons les trois variables comme suit :

```{r}
data_ex_1 <- data_ex |> 
  dplyr::mutate(olympique = ifelse(sites_olympiques_paralympiques== "Site olympique", 1, 0),
         paralympique = ifelse(sites_olympiques_paralympiques== "Site paralympique", 1, 0),
         mixte = ifelse(sites_olympiques_paralympiques %in% c("Site olympique,Site paralympique"), 1, 0))
```

Chaque variable est binaire c'est-à-dire qu'elle prend seulement 2 valeurs : 1 pour "oui" et "0" pour non.

Prenons comme exemple ***olympique***, nous demandons l'ajout de la variable olympique dans le jeu de données initial prenant la valeur 1 si la cellule contient "Site Olympique" et 0 sinon.

### Etape 2 : Compter

Une fois que la création est réalisée, nous comptons le nombre de 1 et de 0 pour chaque variable.

```{r}
table(data_ex_1$olympique)
table(data_ex_1$paralympique)
table(data_ex_1$mixte)
```

Sur les 29 sites présents, il y a 10 sites olympiques, 3 sites paralympiques et 16 sites mixtes.

### Etape finale : Suppression de la colonne "sites_olympiques_paralympiques"

Pour la suite du travail, nous prenons comme base data_ex_1 et nous supprimons par conséquent la colonne puisque les 3 colonnes créées sont plus faciles à manipuler.

```{r}
data_ex_1 <- data_ex_1[,-3]
```

## Question 5

Quels sont les sites qui accueillent plusieurs disciplines sportives ?

La colonne ***sports*** est du même type que la colonne ***sites_olympiques_paralympiques***.\
Par conséquent, il faut avoir recours au même raisonnment pour y répondre.

### Etape 1 : Création de la variable nb_disciplines et compter

Cette variable est construite de sorte que si la cellule ne contient pas de virgule alors cela signifie qu'il y a seulement une discipline. Elle prend donc la valeur "une discipline" et "plusieurs disciplines" sinon.

```{r}
data_ex_2 <- data_ex_1 |> 
  dplyr::mutate(nb_disciplines = ifelse(stringr::str_count(sports,",")== 0, "Une discipline", "Plusieurs disciplines"))
table(data_ex_2$nb_disciplines)
```

Il y a au total 19 sites qui accueillent plusieurs disciplines sportives.

### Etape finale : Identification des sites

Pour les identifier, nous filtrons la table sur plusieurs disciplines et nous demandons à ce que la colonne "nom" s'affiche pour obtenir les noms de ces sites :

```{r}
data_ex_2 |>
  filter(nb_disciplines == "Plusieurs disciplines") |>
  dplyr::select(nom)
```

Nous avons maintenant à disposition tous les sites accueillant plusieurs disciplines sportives.

## Question 6

Quels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?

### Etape 1 : Filtrer et afficher les disciplines paralympiques

Pour répondre à la question, nous filtrons tout d'abord la table sur les sites paralympiques et mixtes ainsi que sur les caractères faisant référence aux sports paralympiques. Puis, nous demandons à ce que les sports s'affichent en incluant les résultats dans un nouvel objet. Pour ce faire, nous faisons appel à la fonction *grepl* pour les caractères comme suit :

```{r}
disciplines_para <- data_ex_2 |>
  filter((paralympique | mixte) & (grepl("Para", sports) | grepl("fauteuil", sports) | grepl("Goalball", sports) | grepl("Cécifoot", sports))) |>
  select(sports)
disciplines_para

```

Cependant, nous retrouvons également des disciplines non paralympiques, d'où la nécessite de réaliser l'étape suivante.

### Etape finale : Séparation de la colonne "sports" et identification

Une fois l'étape 1 réalisée, nous séparons la colonne contenant le nom des sports et nous affichons toutes les disciplines paralympiques du jeu de données.

```{r}

disciplines_para_1 <- disciplines_para |>  
  separate_rows(sports, sep = ",")

disciplines_para_1 |> 
  filter (grepl("Para", sports) | grepl("fauteuil",sports) | grepl("Goalball",sports))

```

Il y a maintenant uniquement l'affichage des sports paralympiques.

## Question 7

Quel(s) site(s) accueille(nt) le plus de disciplines différentes ?

Pour y répondre, nous repartons avec la base de données data_ex_2.

### Etape 1 : Séparer la colonne "sports"

Les disciplines sont séparées par une virgule dans chaque cellule de la colonne ***sports***. Par conséquent, nous décidons de la décomposer afin d'obtenir tous les sports de manière individuelle.

Pour comprendre le processus, lorsqu'une cellule dispose de 4 disciplines différentes séparées par une virgule, le logiciel va créer 4 colonnes.

Pour avoir des dimensions homogènes, le logiciel affiche 4 fois le même sport lorsqu'il n'y a qu'une seule discipline comme suit :

```{r}
#| warning: false
sports_modif<-data.frame(do.call("rbind", 
                               strsplit(as.character(data_ex_2$sports),
                                        ",", fixed = TRUE)))
sports_modif
```

### Etape finale : Inclure les 4 colonnes de sports_modif et tri

Nous incluons les colonnes ***X1, X2, X3 et X4*** induites de l'étape précédente. Ensuite, nous regroupons par nom et nous calculons le nombre de disciplines différentes pour chaque site.

Puis, nous finissons par ranger par ordre décroissant le nombre de disciplines :

```{r}
data_ex_2<- cbind(data_ex_2, sports_modif)

classement <- data_ex_2|> 
  group_by(nom) |> 
  summarise(nbre_sports = n_distinct((c(X1, X2, X3, X4)))) |> 
  arrange(desc(nbre_sports))
classement

```

L'offre maximale de disciplines différentes est au nombre de 4.\
Arena Brecy fait partie des sites proposant cette offre.

## Question 8

Quelle discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?

Pour y répondre, nous allons chercher la discipline qui revient le plus souvent et identifier les sites qui accueillent cette dernière.

### Etape 1 : Avoir le nom de chaque disicipline et trier par ordre décroissant

Nous utilisons le même raisonnement que précédemment mais nous faisons appel cette fois-ci à la fonction *separate_rows* car le logiciel ne va pas remplir la case avec le premier sport lorsque le site a moins de 4 sports. En effet, si nous faisions appel à la fonction *str_split*, l'occurrence des sports serait biaisée.

```{r}
data_ex_3 <- data_ex|> separate_rows(sports, sep = ",")
data_ex_3
apparitions <- table(data_ex_3$sports)
sort(apparitions, decreasing = TRUE)
```

L'athlétisme est la discipline la plus récurrente avec 6 apparitions dont 2 en para.

### Etape finale : Identification des sites

Il ne reste plus qu'à filtrer sur les mots "Athlétisme" et "athlétisme" pour obtenir tous les sites ayant au moins ces disciplines :

```{r}
data_ex_3|> 
  filter(grepl("Athlétisme",sports)|grepl("athlétisme",sports)) |> 
  select(nom, sports)
```

## Question 9 - non résolue

### Etape 1 : Récupérer coordonnées GPS séparément

```{r}
data_ex_4 <- data_ex |> separate(geo_point, into=c("lon","lat"),sep = ", ", remove = FALSE)

localisation <- data_ex_4[,c(2,3,4)] #ne prendre que les colonnes "nom", "lon" et "lat"
str(localisation)

#Convertir en numérique
localisation$lon <- as.numeric(localisation$lon)
localisation$lat <- as.numeric(localisation$lat)

```

### Etape 2 : calculer les distances

La fonction *distHaversine* permet de calculer la plus petite distance entre 2 points.\
Ici, nous calculons les distances à l'aide de la longitude et de la latitude :

```{r}

distance <- distHaversine(localisation[,c("lon", "lat")])
distance
```

# Exercice - semaine 2

Nous faisons appel aux différents packages nécessaires

```{r}
#| warning: false

library(rvest)
library(purrr)
library(dplyr)
```

## Question 1

Lancez la commande suivante\
Que s’est-il passé ? Que contient l’objet list_tables ?

```{r}
list_tables <-
  session("https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques") |>
  html_elements(".wikitable") |> #permet de sélectionner les éléments du document HTML 
  html_table() #renvoie un tableau
```

Cette commande renvoie la liste de tous les médaillés olympiques depuis 1896, disponible sur wikipédia que nous incorporons dans l'objet list_table.\
Ce dernier est une liste de 6 listes, étant chacune un tibble.

## Question 2

Nous allons tout d’abord nous intéresser à la première table.

Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables.

La table n’est pas bien formattée.\
Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or").

Les colonnes ***Editions, Epreuves_2020, Or, Argent, Bronze, Total*** seront converties en colonnes d’entiers.

### Etape 1 : Extraction de la première liste de la liste

```{r}
data_medailles_sport_ete <- list_tables[[1]]
data_medailles_sport_ete
```

## Etape 2 : Manipulations sur cette sous-liste

Nous allons réaliser plusieurs manipulations :\
-- Suppression de la première colonne\
-- Suppression de la première ligne\
-- Renommer les colonnes\
-- Mettre en entiers ***Editions***, ***Epreuves_2020***, ***Or***, ***Argent***, ***Bronze*** et ***Total***.

```{r}
#| warning: false

data_medailles_sport_ete <- data_medailles_sport_ete[, -1]

data_medailles_sport_ete <- data_medailles_sport_ete[-1, ]

colnames(data_medailles_sport_ete) <- c(
  "Discipline", "Annees", "Editions",
  "Epreuves_2020", "Or", "Argent", "Bronze",
  "Total", "Athletes_medailles",
  "Athletes_or"
)

data_medailles_sport_ete[, c(3:8)] <- lapply(data_medailles_sport_ete[, c(3:8)], as.integer)
```

### Etape finale : Vérifier le type des variables

```{r}
str(data_medailles_sport_ete)
```

Maintenant que le nettoyage et le formatage sont réalisés, le jeu de données est prêt pour l'analyse.

## Question 3

Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?

Pour faire le top 3 des disciplines ayant le plus de médaillés, nous faisons appel à la fonction *slice_max* de **dplyr** qui permet ici de sélectionner les trois lignes ayant les trois meilleurs totaux de médailles.

```{r}
data_medailles_sport_ete |> dplyr::slice_max(Total, n=3)
```

L'athlétisme, la natation et la lutte sont les disciplines ayant eu le plus de médaillés.

## Question 4

Quelles sont les 6 disciplines avec le moins d’épreuves en 2020 ?

Même raisonnement mais à l'inverse. Par conséquent, nous utilisons la fonction *slice_min* qui permet de sélectionner les 6 sports ayant eu le moins d'épreuves en 2020.

```{r}
data_medailles_sport_ete |> dplyr::slice_min(Epreuves_2020, n=6)
```

Les disciplines ayant comptabilisé au plus 2 épreuves sont au nombre de 8.

## Question 5 - non résolue

La colonne ***Editions*** nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été.\
Nous souhaitons vérifier ce calcul en implémentant notre propre fonction *calcul_nb_editions_int*.\
Dans un premier temps, la fonction *calcul_nb_editions* prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.

### Etape 1 : Se familiariser avec la colonne Annees

Avant de construire une fonction impliquant des paramètres issus de la base de données, il est nécessaire de comprendre la logique en se focalisant sur la colonne qui permet de définir la fonction, ici : ***Annees***.

```{r}
unique(data_medailles_sport_ete$Annees)
```

Avec cette ligne de code, nous pouvons voir qu'il existe plusieurs formats de remplissage. Nous devons alors trouver une fonction qui puisse les traiter au cas par cas.

### Etape 2 : Méthodes pour les extractions

#### Cellules avec des virgules

Prenons un exemple disposant de tous les formats :

```{r}
x <- "1896, 1900,1908-1924,depuis 1932"
```

La première chose à faire est de séparer chaque élément lorsque nous voyons une virgule.

Cela donne :

```{r}
r <- str_split(x,",",simplify = TRUE)
r
```

r est une matrice et nous avons :\
-- "1896"\
-- " 1900"\
-- "1908-1924"\
-- "depuis 1932"\
Chaque élément dispose d'un format différent qui doit être traité de manière adéquate.

#### Une année uniquement

L'année 1896 se situe à la première ligne et première colonne. Ainsi, une simple sélection de la manière suivante suffit pour l'extraire.

```{r}
r[1,1] 

```

#### Une année avec un espace

Pour l'extraction d'une année avec un espace, il suffit de mettre le type de l'élément en entier. L'année 1900 est sur la première ligne, deuxième colonne.

```{r}
as.integer(r[1,2])
```

#### Années séparées par un -

Pour l'extraction des années, il suffit d'avoir recours à une expression *regex* ainsi qu'à la fonction *str_extract_all* comme suit.

Nous nous concentrons sur l'élément se trouvant sur la première ligne et troisième colonne.

```{r}
str_extract_all(r[1,3],"\\d+")
```

#### Années avec depuis

Pour enlever le "depuis", il suffit de faire la ligne de code précédente car cette dernière ne prend en compte que les caractères numériques.

```{r}
str_extract_all("depuis 1932","\\d+")
```

### Etape 3 : Créer une fonction

Nous avons seulement réalisé les extractions pour la discipline "tir".

Nous souhaiterions faire le même travail pour chaque cellule et comme nous l'avons vu précédemment chaque cellule a des formats différents.

Par conséquent, il faut créer une fonction qui va combiner toutes ces méthodes d'extraction à l'aide de boucles for. Cependant, je n'ai malheureusement pas réussi à la réaliser. Je n'ai également pas réussi à faire les autres questions.

Place maintenant à l'exercice suivant.

# Exercice - semaine 3

Nous importons les différents packages qui vont nous être utiles pour réaliser cette excercice.\
Nous ignorons le fichier CSV qui vient de l'exercice 1.

```{r}
#| warning: false

library(tibble)
library(stringr)
library(lubridate)
library(dplyr)
library(tidyr)
library(arrow)
library(jsonlite)
library(DBI)
library(RSQLite)
```

## Question 1

Listez les fichiers présents dans le dossier data.\
Quelles sont les extensions des différents fichiers ?

```{r}
list.files("data/")
```

Les extensions des différents fichiers sont json, sqlite et parquet.

## Question 2

Lisez le fichier .parquet en utilisant la librairie **arrow**. Quelles sont les dimensions de la table ?\
Quelles sont les colonnes présentes ?

### Etape 1 : Importation

Pour répondre à la question, nous importons tout d'abord le fichier parquet téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices* à l'aide la fonction *read_parquet* qui se trouve dans le package **arrow**.

```{r}
tokyo_athletes <- arrow :: read_parquet("C:/Users/Jasmine/Documents/Nantes/cours/SEMESTRE 2/R avancé/my_blog_2/posts/post-with-code/tokyo_athletes.parquet")
```

### Etape finale : Visualiser la base

Pour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble (cf. exercice 1).

```{r}
tokyo_athletes <- tibble::as_tibble(tokyo_athletes)
tokyo_athletes
```

Le tableau est composé de 11 085 athlètes et de 3 colonnes s'intitulant "Name", "NOC" et "Discipline".

## Question 3

Lisez le fichier .json en utilisant la librairie jsonlite.\
Quelles sont les dimensions de la table ?\
Quelles sont les colonnes présentes ?

### Etape 1 : Importation

Pour répondre à la question, nous importons tout d'abord le fichier json téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices* à l'aide la fonction *read_json* qui se trouve dans le package **jsonlite**.

```{r}
olympics_athletes<- jsonlite::read_json("C:/Users/Jasmine/Documents/Nantes/cours/SEMESTRE 2/R avancé/my_blog_2/posts/post-with-code/olympics_athletes.json", simplifyVector = TRUE)
```

### Etape finale : Visualiser la base

Pour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble (cf. exercice 1).

```{r}
olympics_athletes <- tibble::as_tibble(olympics_athletes)
olympics_athletes
```

La table est composée de 269 731 athlètes et des 13 colonnes suivantes :

```{r}
colnames(olympics_athletes)
```

## Question 4

Importez la librairie **RSQLite**, et ouvrez une connexion à la base de données sqlite en utilisant la fonction *dbConnec*t. Le driver à utiliser sera SQLite().\
Quelles sont les tables présentes dans la table ?\
Vous pourrez utiliser la fonction dbListTables.

La lecture d'un fichier sqlite est particulière et nécessite d'avoir recours à d'autres méthodes.

### Etape 1 : Ouverture d'une connexion

Pour lire un fichier sqlite, il faut établir une connexion avec ce dernier à l'aide de la fonction *dbConnect* du package **DBI**.

```{r}
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "C:/Users/Jasmine/Documents/Nantes/cours/SEMESTRE 2/R avancé/my_blog_2/posts/post-with-code/data.sqlite")
con
```

### Etape 2 : Liste des tables présentes

```{r}
dbListTables(con)
```

Les tables présentes sont "tokyo_medals" et "tokyo_teams".

## Question 5

Créez deux nouvelles tables dans la base de données à l’aide de la fonction *dbWriteTable*.\
Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.

Pour la création des 2 nouvelles tables, nous faisons appel à la fonction *dbWriteTable* de la manière suivante :

```{r}
#dbWriteTable(con,"tokyo_athletes",tokyo_athletes)
#dbWriteTable(con,name = "olympics_athletes",value = olympics_athletes)

```

Le premier argument est la connexion définie précédemment.\
Le deuxième argument est le nom de la nouvelle table.\
Le troisième argument est le nom de la data dans laquelle le fichier a été importé. (cf questions 2 et 3)

## Question 6

Inspectez la table olympics_athletes en utilisant la fonction *dbListFields*.\
Quelles sont les colonnes de la table ?

```{r}
dbListFields(con,"olympics_athletes")
```

## Question 7

Importez cette table depuis la base de données en utilisant la fonction *dbReadTable*.\
Convertissez la table en tibble en utilisant la fonction *as_tibble*.

```{r}
dbReadTable(con,"olympics_athletes") |> view()

olympics_athletes <- as_tibble(dbReadTable(con,"olympics_athletes"))
olympics_athletes

dbDisconnect(con) 
```

La fermeture de la connexion avec *dbDisconnect* est nécessaire puisque nous n'allons plus utiliser cette dernière par la suite.

## Question 8

Convertissez la colonne ***Sex*** en variable catégorielle avec la fonction *mutate*.

Une variable catégorielle est vue comme un facteur sur le logiciel, c'est-à-dire qu'elle dispose d'un nombre limité de modalités. Ici, la variable ***Sex*** n'a que 2 modalités. Par conséquent, la transformer en facteur est cohérent.

```{r}
olympics_athletes |> mutate(Sex=factor(Sex))
```

## Question 9

Créez deux colonnes à partir de la colonne ***Games***. La première colonne ***Year*** sera une colonne de type integer contenant l’année des jeux.\
La deuxième colonne ***isSummer*** sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver.\
Vous pourrez utiliser la fonction *separate_wider_delim* de **tidyr** notamment.

### Etape 1 : Observer la colonne Games et séparation

```{r}
head(olympics_athletes$Games)

olympics_athletes <- olympics_athletes |> separate_wider_delim(Games, delim = " ", names = c("Year", "isSummer"))

colnames(olympics_athletes)
```

Les années et saisons sont séparées par un espace dans les cellules de la colonne ***Games***.\
Le logiciel crée les 2 variables ***Year*** et ***isSummer***.\
La première variable prend les valeurs se trouvant à gauche de l'espace.\
La deuxième variable prend les valeurs se trouvant à droite de l'espace.

### Etape 2 : Changer le type de la variable Year

```{r}
str(olympics_athletes$Year)
olympics_athletes$Year <- as.integer(olympics_athletes$Year)
```

### Etape 3 : Observation et transformer la variable isSummer

```{r}
unique(olympics_athletes$isSummer)
```

La variable prend ces 2 modalités.\
Nous allons par conséquent lui associer les valeurs 1 et 0 de la manière suivante :\
-- 1 si la modalité vaut "Summer"\
-- 0 sinon

Nous finissons par la transformer en facteur.

```{r}
olympics_athletes <- olympics_athletes |> mutate(isSummer= ifelse(isSummer == "Summer", 1, 0))
olympics_athletes$isSummer <- as.factor(olympics_athletes$isSummer)

```

## Question 10

Calculez la moyenne d’age des athletes pour chacune des éditions des JO d’été.\
Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?

Avant de calculer la moyenne ou toute autre statistique de base, il faut faire attention à la présence de valeurs manquantes. En effet, le résultat renverra un résultat nul si des valeurs manquantes sont introduites dans le calcul.

```{r}
sum(is.na(olympics_athletes$Age))
```

La variable ***Age*** a bien 9315 valeurs manquantes. Par conséquent, il faut préciser la suppression des valeurs manquantes dans la formule de la moyenne.

### Etape 1 : Calcul de l'âge moyen global

Avant de calculer l'âge moyen des athlètes pour chacune des éditions, nous trouvons intéressant de calculer l'âge moyen global

```{r}
olympics_athletes |> 
  filter(isSummer=="1") |> 
  summarise(moy_age=mean(Age,na.rm = TRUE))
```

La moyenne d'âge sur l'ensemble des JO d'été est de 25,5 ans.

### Etape 2 : Age moyen pour chaque édition

```{r}
olympics_athletes |> 
  filter(isSummer=="1") |> 
  group_by(Year) |> 
  summarise(moy_age=mean(Age,na.rm = TRUE))
```

### Etape 3 : Tri par ordre décroissant de l'âge moyen

```{r}
olympics_athletes |> 
  filter(isSummer=="1") |> 
  group_by(Year) |> 
  summarise(moy_age=mean(Age,na.rm = TRUE)) |> 
  arrange(desc(moy_age)) 
```

L'édition de 1932 a compté les plus vieux athlètes avec une moyenne d'âge de 30,2 ans.

### Etape finale : Tri par ordre croissant de l'âge moyen

```{r}
olympics_athletes |> 
  filter(isSummer=="1") |> 
  group_by(Year) |> 
  summarise(moy_age=mean(Age,na.rm = TRUE)) |> 
  arrange((moy_age))
```

L'édition de 1896 a compté les plus jeunes athlètes avec une moyenne d'âge de 23,6 ans.

## Question 11

Quelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ?\
Quelle a été cette discipline au cours de chacune des éditions ?\
Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.

### Etape 1 : Tri par ordre décroissant de la taille

Pour répondre à la première question, nous filtrons sur les JO d'été et le sexe féminin puis nous trions par ordre décroissant la taille sur l'ensemble des éditions.

```{r}
olympics_athletes |> 
  filter(isSummer=="1" & Sex =="F") |> 
  arrange(desc(Height)) |> 
  select(Height,Sport) 
```

Sur la plupart des éditions, le basketball est la discipline qui a comptabilisé la plus grande taille.

### Etape 2 : Tri par ordre décroissant selon les années

Pour répondre à la seconde question, nous réalisons la même manipulation en y ajoutant le regroupement par années comme suit :

```{r}
olympics_athletes |> 
  filter(isSummer=="1"& Sex =="F") |>
  group_by(Year) |> 
  arrange(desc(Height)) |> 
  select(Height,Sport) 
```

Une majorité des éditions a enregistré le basketball comme étant la discipline qui a enregisté la plus grande taille.

### Etape finale : Calcul du nombre d'occurrences

Pour répondre à la dernière question, nous filtrons en triant la taille par ordre décroissant et nous demandons au logiciel de compter le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.

```{r}
olympics_athletes |> 
  filter(isSummer=="1" & Sex =="F") |> 
  arrange(desc(Height)) |> 
  count(Sport, sort = TRUE)
```

L'athlétisme a été 11 666 fois la discipline avec les plus grandes athlètes.

## Question 12

En utilisant les fonctions du package **stringr**, extrayez les dates des différentes éditions des JO.

Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que “26 Juillet 2024”.\
Vous pourrez utiliser cette *regex* avec la fonction *str_extract_all* par exemple.

### Etape 1 : Recopier le texte

```{r}
texte <- c("Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois
de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,
ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du
26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde
entier à Paris.")
```

### Etape 2 : Extraire les dates

```{r}
regex_date <- "\\b\\d{1,2}\\s(?:Juillet|Août)\\s\\d{4}\\b"
dates <- str_extract_all(texte, regex_date)[[1]]
dates
```

L'expression régulière est définie comme telle :\
-- d{1,2} signifie l'extraction d'1 ou 2 chiffres pour le jour\
-- s permet de mettre un espace\
-- (?:Juillet\|Août)" correspond au mois écrit en toutes lettres. Ce dernier peut être soit "Juillet" soit "Août".\
-- d{4} signifie l'extraction de 4 chiffres pour l'année

## Question 13

Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction *str_replace*.

```{r}
dates |> str_replace_all(c("Juillet" = "07", "Août"="08"))
```

## Question 14

Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package **lubridate**.

```{r}
dmy(dates)
dates

```

## Question 15

Combien de jours ont séparés les éditions de Rio et Tokyo ?\
Et sépareront les éditions de Tokyo et de Paris ?\
Faites le même calcul en semaines.

### Etape 1 : Calcul du nombre de jours séparant les éditions Rio et Tokyo

Pour calculer les jours, nous calculons la différence entre la date de fin de l'édition de Rio et la date de début de l'édition de Tokyo.

```{r}
int <- interval(ymd("2016-08-20"), ymd("2021-07-23"))
time_length(int, unit = "days")
```

1798 jours ont séparés ces deux éditions.

### Etape 2 : Calcul du nombre de semaines

```{r}
time_length(int, unit = "weeks")
```

Il y a environ 256 semaines entre ces deux éditions.

### Etape 3 : Calcul du nombre de jours séparant les éditions Tokyo et Paris

Pour calculer les jours, nous calculons la différence entre la date de fin de l'édition de Tokyo et la date de début de l'édition de Paris.

```{r}
int2 <- interval(ymd("2021-08-08"), ymd(" 2024-07-26"))
time_length(int2, unit = "days")
```

1083 jours séparent ces deux éditions.

### Etape finale : Calcul du nombre de semaines

```{r}
time_length(int2, unit = "weeks")
```

Il y a environ 154 semaines entre ces deux éditions.

# Objectifs du travail

La réalisation des exercices a permis de pratiquer toutes les notions vues en cours de R avancé passant de la manipulation de données à la création d'un package (article dédié sur le blog).

Chaque exercice va être présenter de la manière suivante :\
-- Questions précises\
-- Réponses avec le code et des commentaires pour faciliter la compréhension

Tous les exercices ont été effectués à partir de bases de données centrées sur les jeux olympiques téléchargeables sur internet.

# Exercice - semaine 1

Nous faisons appel aux différents packages nécessaires

```{r}
#| warning: false
#| eval: false
library(tidyverse)
library(geosphere)
```

## Question 2

Lisez le fichier téléchargé avec la fonction *read.table*. Le résultat sera affecté à l’objet ayant pour nom data_ex. Le jeux de données contient 4 colonnes.\
Quels sont les noms et la nature des colonnes ?\
Combien de lignes contient la data.frame ?

### Etape 1 : Importation

Pour répondre à la question, nous importons tout d'abord le fichier CSV téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices*.

```{r}
path <- "data/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv"
data_ex <- read.csv(path,sep =";", header = TRUE)
data_ex
```

### Etape 2 : Visualiser la base

Pour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble pour avoir une meilleure organisation des informations disponibles.

```{r}
library(tibble)
data_ex <- as_tibble(data_ex)
data_ex
```

Avec cet aperçu, nous pouvons voir que le tableau est constitué de 31 lignes et 4 colonnes s'intitulant respectivement ***geo_point***, ***nom*** ***sites_olympiques_paralympiques*** et ***sports***.\
Elles sont toutes du type caractère.

Autres méthodes pour obtenir ces informations :

```{r}
colnames(data_ex)
str(data_ex)
dim(data_ex)
```

### Etape finale : Suppression des valeurs manquantes

En regardant celui-ci, nous remarquons la présence de valeurs manquantes pour les lignes 3 et 5. Par conséquent, nous les supprimons pour éviter d'avoir des erreurs par la suite lors des manipulations.

```{r}
View(data_ex)
data_ex <- data_ex[-c(3,5),]
```

## Questions 3 et 4

Combien y a t’il de sites olympiques ?\
Combien y a t’il de sites paralympiques ?

Pour répondre à ces questions, nous procédons à plusieurs étapes.

### Etape 1 : Création de variables

Au lieu de séparer notre colonne ***sites_olympiques_paralympiques***, nous décidons de créer les variables suivantes :\
-- ***olympique*** qui ne prend uniquement en compte les sites olympiques.\
-- ***paralympique*** qui ne prend uniquement en compte les sites paralympiques.\
-- ***mixte*** qui prend en compte tous les sites.

Pour ce faire, nous prenons une nouvelle version de la base initiale dans laquelle nous ajoutons les trois variables comme suit :

```{r}
data_ex_1 <- data_ex |> 
  mutate(olympique = ifelse(sites_olympiques_paralympiques== "Site olympique", 1, 0),
         paralympique = ifelse(sites_olympiques_paralympiques== "Site paralympique", 1, 0),
         mixte = ifelse(sites_olympiques_paralympiques %in% c("Site olympique,Site paralympique"), 1, 0))
```

Chaque variable est binaire c'est-à-dire qu'elle prend seulement 2 valeurs : 1 pour "oui" et "0" pour non.

Prenons comme exemple ***olympique***, nous demandons l'ajout de la variable olympique dans le jeu de données initial prenant la valeur 1 si la cellule contient "Site Olympique" et 0 sinon.

### Etape 2 : Compter

Une fois que la création est réalisée, nous comptons le nombre de 1 et de 0 pour chaque variable.

```{r}
table(data_ex_1$olympique)
table(data_ex_1$paralympique)
table(data_ex_1$mixte)
```

Sur les 29 sites présents, il y a 10 sites olympiques, 3 sites paralympiques et 16 sites mixtes.

### Etape finale : Suppression de la colonne "sites_olympiques_paralympiques"

Pour la suite du travail, nous prenons comme base data_ex_1 et nous supprimons par conséquent la colonne puisque les 3 colonnes créées sont plus faciles à manipuler.

```{r}
data_ex_1 <- data_ex_1[,-3]
```

## Question 5

Quels sont les sites qui accueillent plusieurs disciplines sportives ?

La colonne ***sports*** est du même type que la colonne ***sites_olympiques_paralympiques***.\
Par conséquent, il faut avoir recours au même raisonnment pour y répondre.

### Etape 1 : Création de la variable nb_disciplines et compter

Cette variable est construite de sorte que si la cellule ne contient pas de virgule alors cela signifie qu'il y a seulement une discipline. Elle prend donc la valeur "une discipline" et "plusieurs disciplines" sinon.

```{r}
data_ex_2 <- data_ex_1 |> 
  mutate(nb_disciplines = ifelse(str_count(sports,",")== 0, "Une discipline", "Plusieurs disciplines"))
table(data_ex_2$nb_disciplines)
```

Il y a au total 19 sites qui accueillent plusieurs disciplines sportives.

### Etape finale : Identification des sites

Pour les identifier, nous filtrons la table sur plusieurs disciplines et nous demandons à ce que la colonne "nom" s'affiche pour obtenir les noms de ces sites :

```{r}
data_ex_2 |>
  filter(nb_disciplines == "Plusieurs disciplines") |>
  select(nom)
```

Nous avons maintenant à disposition tous les sites accueillant plusieurs disciplines sportives.

## Question 6

Quels sont les disciplines para-olympiques accueillies dans ces sites franciliens ?

### Etape 1 : Filtrer et afficher les disciplines paralympiques

Pour répondre à la question, nous filtrons tout d'abord la table sur les sites paralympiques et mixtes ainsi que sur les caractères faisant référence aux sports paralympiques. Puis, nous demandons à ce que les sports s'affichent en incluant les résultats dans un nouvel objet. Pour ce faire, nous faisons appel à la fonction *grepl* pour les caractères comme suit :

```{r}
disciplines_para <- data_ex_2 |>
  filter((paralympique | mixte) & (grepl("Para", sports) | grepl("fauteuil", sports) | grepl("Goalball", sports) | grepl("Cécifoot", sports))) |>
  select(sports)
disciplines_para

```

Cependant, nous retrouvons également des disciplines non paralympiques, d'où la nécessite de réaliser l'étape suivante.

### Etape finale : Séparation de la colonne "sports" et identification

Une fois l'étape 1 réalisée, nous séparons la colonne contenant le nom des sports et nous affichons toutes les disciplines paralympiques du jeu de données.

```{r}

disciplines_para_1 <- disciplines_para |>  
  separate_rows(sports, sep = ",")

disciplines_para_1 |> 
  filter (grepl("Para", sports) | grepl("fauteuil",sports) | grepl("Goalball",sports))

```

Il y a maintenant uniquement l'affichage des sports paralympiques.

## Question 7

Quel(s) site(s) accueille(nt) le plus de disciplines différentes ?

Pour y répondre, nous repartons avec la base de données data_ex_2.

### Etape 1 : Séparer la colonne "sports"

Les disciplines sont séparées par une virgule dans chaque cellule de la colonne ***sports***. Par conséquent, nous décidons de la décomposer afin d'obtenir tous les sports de manière individuelle.

Pour comprendre le processus, lorsqu'une cellule dispose de 4 disciplines différentes séparées par une virgule, le logiciel va créer 4 colonnes.

Pour avoir des dimensions homogènes, le logiciel affiche 4 fois le même sport lorsqu'il n'y a qu'une seule discipline comme suit :

```{r}
#| warning: false
sports_modif<-data.frame(do.call("rbind", 
                               strsplit(as.character(data_ex_2$sports),
                                        ",", fixed = TRUE)))
sports_modif
```

### Etape finale : Inclure les 4 colonnes de sports_modif et tri

Nous incluons les colonnes ***X1, X2, X3 et X4*** induites de l'étape précédente. Ensuite, nous regroupons par nom et nous calculons le nombre de disciplines différentes pour chaque site.

Puis, nous finissons par ranger par ordre décroissant le nombre de disciplines :

```{r}
data_ex_2<- cbind(data_ex_2, sports_modif)

classement <- data_ex_2|> 
  group_by(nom) |> 
  summarise(nbre_sports = n_distinct((c(X1, X2, X3, X4)))) |> 
  arrange(desc(nbre_sports))
classement

```

L'offre maximale de disciplines différentes est au nombre de 4.\
Arena Brecy fait partie des sites proposant cette offre.

## Question 8

Quelle discipline aura lieu sur le plus grand nombre de sites ? Quels sont ces sites ?

Pour y répondre, nous allons chercher la discipline qui revient le plus souvent et identifier les sites qui accueillent cette dernière.

### Etape 1 : Avoir le nom de chaque disicipline et trier par ordre décroissant

Nous utilisons le même raisonnement que précédemment mais nous faisons appel cette fois-ci à la fonction *separate_rows* car le logiciel ne va pas remplir la case avec le premier sport lorsque le site a moins de 4 sports. En effet, si nous faisions appel à la fonction *str_split*, l'occurrence des sports serait biaisée.

```{r}
data_ex_3 <- data_ex|> separate_rows(sports, sep = ",")
data_ex_3
apparitions <- table(data_ex_3$sports)
sort(apparitions, decreasing = TRUE)
```

L'athlétisme est la discipline la plus récurrente avec 6 apparitions dont 2 en para.

### Etape finale : Identification des sites

Il ne reste plus qu'à filtrer sur les mots "Athlétisme" et "athlétisme" pour obtenir tous les sites ayant au moins ces disciplines :

```{r}
data_ex_3|> 
  filter(grepl("Athlétisme",sports)|grepl("athlétisme",sports)) |> 
  select(nom, sports)
```

## Question 9 - non résolue

### Etape 1 : Récupérer coordonnées GPS séparément

```{r}
data_ex_4 <- data_ex |> separate(geo_point, into=c("lon","lat"),sep = ", ", remove = FALSE)

localisation <- data_ex_4[,c(2,3,4)] #ne prendre que les colonnes "nom", "lon" et "lat"
str(localisation)

#Convertir en numérique
localisation$lon <- as.numeric(localisation$lon)
localisation$lat <- as.numeric(localisation$lat)

```

### Etape 2 : calculer les distances

La fonction *distHaversine* permet de calculer la plus petite distance entre 2 points.\
Ici, nous calculons les distances à l'aide de la longitude et de la latitude :

```{r}

distance <- distHaversine(localisation[,c("lon", "lat")])
distance
```

# Exercice - semaine 2

Nous faisons appel aux différents packages nécessaires

```{r}
#| warning: false

library(rvest)
library(purrr)
library(dplyr)
```

## Question 1

Lancez la commande suivante\
Que s’est-il passé ? Que contient l’objet list_tables ?

```{r}
list_tables <-
  session("https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques") |>
  html_elements(".wikitable") |> #permet de sélectionner les éléments du document HTML 
  html_table() #renvoie un tableau
```

Cette commande renvoie la liste de tous les médaillés olympiques depuis 1896, disponible sur wikipédia que nous incorporons dans l'objet list_table.\
Ce dernier est une liste de 6 listes, étant chacune un tibble.

## Question 2

Nous allons tout d’abord nous intéresser à la première table.

Créez un objet intitulé data_medailles_sport_ete contenant le premier élément de list_tables.

La table n’est pas bien formattée.\
Supprimez la première colonne, les noms de colonnes et la première ligne. Renommez les colonnes en c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or").

Les colonnes ***Editions, Epreuves_2020, Or, Argent, Bronze, Total*** seront converties en colonnes d’entiers.

### Etape 1 : Extraction de la première liste de la liste

```{r}
data_medailles_sport_ete <- list_tables[[1]]
data_medailles_sport_ete
```

## Etape 2 : Manipulations sur cette sous-liste

Nous allons réaliser plusieurs manipulations :\
-- Suppression de la première colonne\
-- Suppression de la première ligne\
-- Renommer les colonnes\
-- Mettre en entiers ***Editions***, ***Epreuves_2020***, ***Or***, ***Argent***, ***Bronze*** et ***Total***.

```{r}
#| warning: false

data_medailles_sport_ete <- data_medailles_sport_ete[, -1]

data_medailles_sport_ete <- data_medailles_sport_ete[-1, ]

colnames(data_medailles_sport_ete) <- c(
  "Discipline", "Annees", "Editions",
  "Epreuves_2020", "Or", "Argent", "Bronze",
  "Total", "Athletes_medailles",
  "Athletes_or"
)

data_medailles_sport_ete[, c(3:8)] <- lapply(data_medailles_sport_ete[, c(3:8)], as.integer)
```

### Etape finale : Vérifier le type des variables

```{r}
str(data_medailles_sport_ete)
```

Maintenant que le nettoyage et le formatage sont réalisés, le jeu de données est prêt pour l'analyse.

## Question 3

Quelles sont les 3 disciplines avec le plus de médailles distribuées depuis le début de l’histoire des jeux olympiques ?

Pour faire le top 3 des disciplines ayant le plus de médaillés, nous faisons appel à la fonction *slice_max* de **dplyr** qui permet ici de sélectionner les trois lignes ayant les trois meilleurs totaux de médailles.

```{r}
data_medailles_sport_ete |> slice_max(Total, n=3)
```

L'athlétisme, la natation et la lutte sont les disciplines ayant eu le plus de médaillés.

## Question 4

Quelles sont les 6 disciplines avec le moins d’épreuves en 2020 ?

Même raisonnement mais à l'inverse. Par conséquent, nous utilisons la fonction *slice_min* qui permet de sélectionner les 6 sports ayant eu le moins d'épreuves en 2020.

```{r}
data_medailles_sport_ete |> slice_min(Epreuves_2020, n=6)
```

Les disciplines ayant comptabilisé au plus 2 épreuves sont au nombre de 8.

## Question 5 - non résolue

La colonne ***Editions*** nous renseigne sur le nombre total d’apparence des disciplines aux JO d’été.\
Nous souhaitons vérifier ce calcul en implémentant notre propre fonction *calcul_nb_editions_int*.\
Dans un premier temps, la fonction *calcul_nb_editions* prendra en entrée un paramètre depuis, de type entier, qui représente depuis quelle année la discipline est au programme.

### Etape 1 : Se familiariser avec la colonne Annees

Avant de construire une fonction impliquant des paramètres issus de la base de données, il est nécessaire de comprendre la logique en se focalisant sur la colonne qui permet de définir la fonction, ici : ***Annees***.

```{r}
unique(data_medailles_sport_ete$Annees)
```

Avec cette ligne de code, nous pouvons voir qu'il existe plusieurs formats de remplissage. Nous devons alors trouver une fonction qui puisse les traiter au cas par cas.

### Etape 2 : Méthodes pour les extractions

#### Cellules avec des virgules

Prenons un exemple disposant de tous les formats :

```{r}
x <- "1896, 1900,1908-1924,depuis 1932"
```

La première chose à faire est de séparer chaque élément lorsque nous voyons une virgule.

Cela donne :

```{r}
r <- str_split(x,",",simplify = TRUE)
r
```

r est une matrice et nous avons :\
-- "1896"\
-- " 1900"\
-- "1908-1924"\
-- "depuis 1932"\
Chaque élément dispose d'un format différent qui doit être traité de manière adéquate.

#### Une année uniquement

L'année 1896 se situe à la première ligne et première colonne. Ainsi, une simple sélection de la manière suivante suffit pour l'extraire.

```{r}
r[1,1] 

```

#### Une année avec un espace

Pour l'extraction d'une année avec un espace, il suffit de mettre le type de l'élément en entier. L'année 1900 est sur la première ligne, deuxième colonne.

```{r}
as.integer(r[1,2])
```

#### Années séparées par un -

Pour l'extraction des années, il suffit d'avoir recours à une expression *regex* ainsi qu'à la fonction *str_extract_all* comme suit.

Nous nous concentrons sur l'élément se trouvant sur la première ligne et troisième colonne.

```{r}
str_extract_all(r[1,3],"\\d+")
```

#### Années avec depuis

Pour enlever le "depuis", il suffit de faire la ligne de code précédente car cette dernière ne prend en compte que les caractères numériques.

```{r}
str_extract_all("depuis 1932","\\d+")
```

### Etape 3 : Créer une fonction

Nous avons seulement réalisé les extractions pour la discipline "tir".

Nous souhaiterions faire le même travail pour chaque cellule et comme nous l'avons vu précédemment chaque cellule a des formats différents.

Par conséquent, il faut créer une fonction qui va combiner toutes ces méthodes d'extraction à l'aide de boucles for. Cependant, je n'ai malheureusement pas réussi à la réaliser. Je n'ai également pas réussi à faire les autres questions.

Place maintenant à l'exercice suivant.

# Exercice - semaine 3

Nous importons les différents packages qui vont nous être utiles pour réaliser cette excercice.\
Nous ignorons le fichier CSV qui vient de l'exercice 1.

```{r}
#| warning: false

library(tibble)
library(stringr)
library(lubridate)
library(dplyr)
library(tidyr)
library(arrow)
library(jsonlite)
library(DBI)
library(RSQLite)
```

## Question 1

Listez les fichiers présents dans le dossier data.\
Quelles sont les extensions des différents fichiers ?

```{r}
list.files("data/")
```

Les extensions des différents fichiers sont json, sqlite et parquet.

## Question 2

Lisez le fichier .parquet en utilisant la librairie **arrow**. Quelles sont les dimensions de la table ?\
Quelles sont les colonnes présentes ?

### Etape 1 : Importation

Pour répondre à la question, nous importons tout d'abord le fichier parquet téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices* à l'aide la fonction *read_parquet* qui se trouve dans le package **arrow**.

```{r}
tokyo_athletes <- arrow :: read_parquet("data/tokyo_athletes.parquet")
```

### Etape finale : Visualiser la base

Pour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble (cf. exercice 1).

```{r}
tokyo_athletes <- as_tibble(tokyo_athletes)
tokyo_athletes
```

Le tableau est composé de 11 085 athlètes et de 3 colonnes s'intitulant "Name", "NOC" et "Discipline".

## Question 3

Lisez le fichier .json en utilisant la librairie jsonlite.\
Quelles sont les dimensions de la table ?\
Quelles sont les colonnes présentes ?

### Etape 1 : Importation

Pour répondre à la question, nous importons tout d'abord le fichier json téléchargé qui se trouve dans le dossier data du projet Rstudio intitulé *exercices* à l'aide la fonction *read_json* qui se trouve dans le package **jsonlite**.

```{r}
olympics_athletes<- read_json("data/olympics_athletes.json", simplifyVector = TRUE)
```

### Etape finale : Visualiser la base

Pour faciliter la lecture du jeu de données, nous décidons de le transformer en tibble (cf. exercice 1).

```{r}
olympics_athletes <- as_tibble(olympics_athletes)
olympics_athletes
```

La table est composée de 269 731 athlètes et des 13 colonnes suivantes :

```{r}
colnames(olympics_athletes)
```

## Question 4

Importez la librairie **RSQLite**, et ouvrez une connexion à la base de données sqlite en utilisant la fonction *dbConnec*t. Le driver à utiliser sera SQLite().\
Quelles sont les tables présentes dans la table ?\
Vous pourrez utiliser la fonction dbListTables.

La lecture d'un fichier sqlite est particulière et nécessite d'avoir recours à d'autres méthodes.

### Etape 1 : Ouverture d'une connexion

Pour lire un fichier sqlite, il faut établir une connexion avec ce dernier à l'aide de la fonction *dbConnect* du package **DBI**.

```{r}
con <- dbConnect(RSQLite::SQLite(), dbname = "data/data.sqlite")
con
```

### Etape 2 : Liste des tables présentes

```{r}
dbListTables(con)
```

Les tables présentes sont "tokyo_medals" et "tokyo_teams".

## Question 5

Créez deux nouvelles tables dans la base de données à l’aide de la fonction *dbWriteTable*.\
Les tables s’appeleront respectivement olympics_athletes et tokyo_athletes pour les fichiers olympics_athletes.json et tokyo_athletes.parquet.

Pour la création des 2 nouvelles tables, nous faisons appel à la fonction *dbWriteTable* de la manière suivante :

```{r}
#dbWriteTable(con,"tokyo_athletes",tokyo_athletes)
#dbWriteTable(con,name = "olympics_athletes",value = olympics_athletes)

```

Le premier argument est la connexion définie précédemment.\
Le deuxième argument est le nom de la nouvelle table.\
Le troisième argument est le nom de la data dans laquelle le fichier a été importé. (cf questions 2 et 3)

## Question 6

Inspectez la table olympics_athletes en utilisant la fonction *dbListFields*.\
Quelles sont les colonnes de la table ?

```{r}
dbListFields(con,"olympics_athletes")
```

## Question 7

Importez cette table depuis la base de données en utilisant la fonction *dbReadTable*.\
Convertissez la table en tibble en utilisant la fonction *as_tibble*.

```{r}
dbReadTable(con,"olympics_athletes") |> view()

olympics_athletes <- as_tibble(dbReadTable(con,"olympics_athletes"))
olympics_athletes

dbDisconnect(con) 
```

La fermeture de la connexion avec *dbDisconnect* est nécessaire puisque nous n'allons plus utiliser cette dernière par la suite.

## Question 8

Convertissez la colonne ***Sex*** en variable catégorielle avec la fonction *mutate*.

Une variable catégorielle est vue comme un facteur sur le logiciel, c'est-à-dire qu'elle dispose d'un nombre limité de modalités. Ici, la variable ***Sex*** n'a que 2 modalités. Par conséquent, la transformer en facteur est cohérent.

```{r}
olympics_athletes |> mutate(Sex=factor(Sex))
```

## Question 9

Créez deux colonnes à partir de la colonne ***Games***. La première colonne ***Year*** sera une colonne de type integer contenant l’année des jeux.\
La deuxième colonne ***isSummer*** sera une colonne booléenne qui indiquera si les jeux sont des jeux d’été ou d’hiver.\
Vous pourrez utiliser la fonction *separate_wider_delim* de **tidyr** notamment.

### Etape 1 : Observer la colonne Games et séparation

```{r}
head(olympics_athletes$Games)

olympics_athletes <- olympics_athletes |> separate_wider_delim(Games, delim = " ", names = c("Year", "isSummer"))

colnames(olympics_athletes)
```

Les années et saisons sont séparées par un espace dans les cellules de la colonne ***Games***.\
Le logiciel crée les 2 variables ***Year*** et ***isSummer***.\
La première variable prend les valeurs se trouvant à gauche de l'espace.\
La deuxième variable prend les valeurs se trouvant à droite de l'espace.

### Etape 2 : Changer le type de la variable Year

```{r}
str(olympics_athletes$Year)
olympics_athletes$Year <- as.integer(olympics_athletes$Year)
```

### Etape 3 : Observation et transformer la variable isSummer

```{r}
unique(olympics_athletes$isSummer)
```

La variable prend ces 2 modalités.\
Nous allons par conséquent lui associer les valeurs 1 et 0 de la manière suivante :\
-- 1 si la modalité vaut "Summer"\
-- 0 sinon

Nous finissons par la transformer en facteur.

```{r}
olympics_athletes <- olympics_athletes |> mutate(isSummer= ifelse(isSummer == "Summer", 1, 0))
olympics_athletes$isSummer <- as.factor(olympics_athletes$isSummer)

```

## Question 10

Calculez la moyenne d’age des athletes pour chacune des éditions des JO d’été.\
Quelle édition a compté les athlètes les plus jeunes ? Les plus vieux ?

Avant de calculer la moyenne ou toute autre statistique de base, il faut faire attention à la présence de valeurs manquantes. En effet, le résultat renverra un résultat nul si des valeurs manquantes sont introduites dans le calcul.

```{r}
sum(is.na(olympics_athletes$Age))
```

La variable ***Age*** a bien 9315 valeurs manquantes. Par conséquent, il faut préciser la suppression des valeurs manquantes dans la formule de la moyenne.

### Etape 1 : Calcul de l'âge moyen global

Avant de calculer l'âge moyen des athlètes pour chacune des éditions, nous trouvons intéressant de calculer l'âge moyen global

```{r}
olympics_athletes |> 
  filter(isSummer=="1") |> 
  summarise(moy_age=mean(Age,na.rm = TRUE))
```

La moyenne d'âge sur l'ensemble des JO d'été est de 25,5 ans.

### Etape 2 : Age moyen pour chaque édition

```{r}
olympics_athletes |> 
  filter(isSummer=="1") |> 
  group_by(Year) |> 
  summarise(moy_age=mean(Age,na.rm = TRUE))
```

### Etape 3 : Tri par ordre décroissant de l'âge moyen

```{r}
olympics_athletes |> 
  filter(isSummer=="1") |> 
  group_by(Year) |> 
  summarise(moy_age=mean(Age,na.rm = TRUE)) |> 
  arrange(desc(moy_age)) 
```

L'édition de 1932 a compté les plus vieux athlètes avec une moyenne d'âge de 30,2 ans.

### Etape finale : Tri par ordre croissant de l'âge moyen

```{r}
olympics_athletes |> 
  filter(isSummer=="1") |> 
  group_by(Year) |> 
  summarise(moy_age=mean(Age,na.rm = TRUE)) |> 
  arrange((moy_age))
```

L'édition de 1896 a compté les plus jeunes athlètes avec une moyenne d'âge de 23,6 ans.

## Question 11

Quelle est la discipline des JO d’été dont la taille des athlètes féminines est la plus grande ?\
Quelle a été cette discipline au cours de chacune des éditions ?\
Calculez le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.

### Etape 1 : Tri par ordre décroissant de la taille

Pour répondre à la première question, nous filtrons sur les JO d'été et le sexe féminin puis nous trions par ordre décroissant la taille sur l'ensemble des éditions.

```{r}
olympics_athletes |> 
  filter(isSummer=="1" & Sex =="F") |> 
  arrange(desc(Height)) |> 
  select(Height,Sport) 
```

Sur la plupart des éditions, le basketball est la discipline qui a comptabilisé la plus grande taille.

### Etape 2 : Tri par ordre décroissant selon les années

Pour répondre à la seconde question, nous réalisons la même manipulation en y ajoutant le regroupement par années comme suit :

```{r}
olympics_athletes |> 
  filter(isSummer=="1"& Sex =="F") |>
  group_by(Year) |> 
  arrange(desc(Height)) |> 
  select(Height,Sport) 
```

Une majorité des éditions a enregistré le basketball comme étant la discipline qui a enregisté la plus grande taille.

### Etape finale : Calcul du nombre d'occurrences

Pour répondre à la dernière question, nous filtrons en triant la taille par ordre décroissant et nous demandons au logiciel de compter le nombre de fois où chaque discipline a été la discipline avec les plus grandes athlètes.

```{r}
olympics_athletes |> 
  filter(isSummer=="1" & Sex =="F") |> 
  arrange(desc(Height)) |> 
  count(Sport, sort = TRUE)
```

L'athlétisme a été 11 666 fois la discipline avec les plus grandes athlètes.

## Question 12

En utilisant les fonctions du package **stringr**, extrayez les dates des différentes éditions des JO.

Aide : définissez une expression régulière capable de capturer une séquence de caractères représentant une date telle que “26 Juillet 2024”.\
Vous pourrez utiliser cette *regex* avec la fonction *str_extract_all* par exemple.

### Etape 1 : Recopier le texte

```{r}
texte <- c("Les jeux olympiques d’été se déroulent normalement tous les 4 ans, durant les mois
de Juillet et Août. Les jeux de Rio ont eu lieu du 5 Août 2016 au 20 Août 2016,
ceux de Tokyo du 23 Juillet 2021 au 8 Août 2021, et ceux de Paris auront lieu du
26 Juillet 2024 au 11 Août 2024. Plus de 10000 athlètes sont attendus du monde
entier à Paris.")
```

### Etape 2 : Extraire les dates

```{r}
regex_date <- "\\b\\d{1,2}\\s(?:Juillet|Août)\\s\\d{4}\\b"
dates <- str_extract_all(texte, regex_date)[[1]]
dates
```

L'expression régulière est définie comme telle :\
-- d{1,2} signifie l'extraction d'1 ou 2 chiffres pour le jour\
-- s permet de mettre un espace\
-- (?:Juillet\|Août)" correspond au mois écrit en toutes lettres. Ce dernier peut être soit "Juillet" soit "Août".\
-- d{4} signifie l'extraction de 4 chiffres pour l'année

## Question 13

Remplacez les noms des mois par leur numéro pour rendre ces éléments convertibles en date en utilisant la fonction *str_replace*.

```{r}
dates |> str_replace_all(c("Juillet" = "07", "Août"="08"))
```

## Question 14

Convertissez ces 3 éléments en date en utilisant la fonction appropriée du package **lubridate**.

```{r}
dmy(dates)
dates

```

## Question 15

Combien de jours ont séparés les éditions de Rio et Tokyo ?\
Et sépareront les éditions de Tokyo et de Paris ?\
Faites le même calcul en semaines.

### Etape 1 : Calcul du nombre de jours séparant les éditions Rio et Tokyo

Pour calculer les jours, nous calculons la différence entre la date de fin de l'édition de Rio et la date de début de l'édition de Tokyo.

```{r}
int <- interval(ymd("2016-08-20"), ymd("2021-07-23"))
time_length(int, unit = "days")
```

1798 jours ont séparés ces deux éditions.

### Etape 2 : Calcul du nombre de semaines

```{r}
time_length(int, unit = "weeks")
```

Il y a environ 256 semaines entre ces deux éditions.

### Etape 3 : Calcul du nombre de jours séparant les éditions Tokyo et Paris

Pour calculer les jours, nous calculons la différence entre la date de fin de l'édition de Tokyo et la date de début de l'édition de Paris.

```{r}
int2 <- interval(ymd("2021-08-08"), ymd(" 2024-07-26"))
time_length(int2, unit = "days")
```

1083 jours séparent ces deux éditions.

### Etape finale : Calcul du nombre de semaines

```{r}
time_length(int2, unit = "weeks")
```

Il y a environ 154 semaines entre ces deux éditions.
